
Motor Controller Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000124a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007e  00800060  0000124a  000012de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000f0  008000de  008000de  0000135c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000135c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000013b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000013f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001424  00000000  00000000  000014b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000825  00000000  00000000  000028d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009ec  00000000  00000000  000030fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000025c  00000000  00000000  00003aec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005cb  00000000  00000000  00003d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bbc  00000000  00000000  00004313  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00004ecf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 bd 03 	jmp	0x77a	; 0x77a <__vector_18>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e4       	ldi	r30, 0x4A	; 74
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 3d       	cpi	r26, 0xDE	; 222
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	ae ed       	ldi	r26, 0xDE	; 222
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3c       	cpi	r26, 0xCE	; 206
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5e 04 	call	0x8bc	; 0x8bc <main>
      8a:	0c 94 23 09 	jmp	0x1246	; 0x1246 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <text_arrange.2103>:
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
	LCD_String(str);		/* Call LCD string function */
}
      92:	2f 92       	push	r2
      94:	3f 92       	push	r3
      96:	d1 01       	movw	r26, r2
      98:	80 e0       	ldi	r24, 0x00	; 0
      9a:	90 e0       	ldi	r25, 0x00	; 0
      9c:	08 c0       	rjmp	.+16     	; 0xae <text_arrange.2103+0x1c>
      9e:	14 96       	adiw	r26, 0x04	; 4
      a0:	2c 91       	ld	r18, X
      a2:	14 97       	sbiw	r26, 0x04	; 4
      a4:	fc 01       	movw	r30, r24
      a6:	e0 52       	subi	r30, 0x20	; 32
      a8:	ff 4f       	sbci	r31, 0xFF	; 255
      aa:	20 83       	st	Z, r18
      ac:	01 96       	adiw	r24, 0x01	; 1
      ae:	80 31       	cpi	r24, 0x10	; 16
      b0:	91 05       	cpc	r25, r1
      b2:	ac f3       	brlt	.-22     	; 0x9e <text_arrange.2103+0xc>
      b4:	80 e0       	ldi	r24, 0x00	; 0
      b6:	90 e0       	ldi	r25, 0x00	; 0
      b8:	0c c0       	rjmp	.+24     	; 0xd2 <text_arrange.2103+0x40>
      ba:	12 96       	adiw	r26, 0x02	; 2
      bc:	ed 91       	ld	r30, X+
      be:	fc 91       	ld	r31, X
      c0:	13 97       	sbiw	r26, 0x03	; 3
      c2:	e8 0f       	add	r30, r24
      c4:	f9 1f       	adc	r31, r25
      c6:	20 81       	ld	r18, Z
      c8:	fc 01       	movw	r30, r24
      ca:	e0 51       	subi	r30, 0x10	; 16
      cc:	ff 4f       	sbci	r31, 0xFF	; 255
      ce:	20 83       	st	Z, r18
      d0:	01 96       	adiw	r24, 0x01	; 1
      d2:	2d 91       	ld	r18, X+
      d4:	3c 91       	ld	r19, X
      d6:	11 97       	sbiw	r26, 0x01	; 1
      d8:	82 17       	cp	r24, r18
      da:	93 07       	cpc	r25, r19
      dc:	74 f3       	brlt	.-36     	; 0xba <text_arrange.2103+0x28>
      de:	14 96       	adiw	r26, 0x04	; 4
      e0:	8c 91       	ld	r24, X
      e2:	f9 01       	movw	r30, r18
      e4:	e0 51       	subi	r30, 0x10	; 16
      e6:	ff 4f       	sbci	r31, 0xFF	; 255
      e8:	80 83       	st	Z, r24
      ea:	3f 90       	pop	r3
      ec:	2f 90       	pop	r2
      ee:	08 95       	ret

000000f0 <remove_items.2113>:
      f0:	8f ef       	ldi	r24, 0xFF	; 255
      f2:	9f ef       	ldi	r25, 0xFF	; 255
      f4:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <i+0x1>
      f8:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <i>
      fc:	0f c0       	rjmp	.+30     	; 0x11c <remove_items.2113+0x2c>
      fe:	9c 01       	movw	r18, r24
     100:	2f 5f       	subi	r18, 0xFF	; 255
     102:	3f 4f       	sbci	r19, 0xFF	; 255
     104:	f9 01       	movw	r30, r18
     106:	e0 52       	subi	r30, 0x20	; 32
     108:	ff 4f       	sbci	r31, 0xFF	; 255
     10a:	40 81       	ld	r20, Z
     10c:	fc 01       	movw	r30, r24
     10e:	e0 52       	subi	r30, 0x20	; 32
     110:	ff 4f       	sbci	r31, 0xFF	; 255
     112:	40 83       	st	Z, r20
     114:	30 93 c1 01 	sts	0x01C1, r19	; 0x8001c1 <i+0x1>
     118:	20 93 c0 01 	sts	0x01C0, r18	; 0x8001c0 <i>
     11c:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <i>
     120:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <i+0x1>
     124:	87 3c       	cpi	r24, 0xC7	; 199
     126:	91 05       	cpc	r25, r1
     128:	54 f3       	brlt	.-44     	; 0xfe <remove_items.2113+0xe>
     12a:	08 95       	ret

0000012c <process_text.2119>:
     12c:	80 e0       	ldi	r24, 0x00	; 0
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	09 c0       	rjmp	.+18     	; 0x144 <process_text.2119+0x18>
     132:	fc 01       	movw	r30, r24
     134:	e0 52       	subi	r30, 0x20	; 32
     136:	ff 4f       	sbci	r31, 0xFF	; 255
     138:	20 81       	ld	r18, Z
     13a:	fc 01       	movw	r30, r24
     13c:	e2 55       	subi	r30, 0x52	; 82
     13e:	fe 4f       	sbci	r31, 0xFE	; 254
     140:	20 83       	st	Z, r18
     142:	01 96       	adiw	r24, 0x01	; 1
     144:	80 31       	cpi	r24, 0x10	; 16
     146:	91 05       	cpc	r25, r1
     148:	a4 f3       	brlt	.-24     	; 0x132 <process_text.2119+0x6>
     14a:	08 95       	ret

0000014c <LCD_Command>:
     14c:	85 bb       	out	0x15, r24	; 21
     14e:	82 b3       	in	r24, 0x12	; 18
     150:	8b 7f       	andi	r24, 0xFB	; 251
     152:	82 bb       	out	0x12, r24	; 18
     154:	82 b3       	in	r24, 0x12	; 18
     156:	87 7f       	andi	r24, 0xF7	; 247
     158:	82 bb       	out	0x12, r24	; 18
     15a:	82 b3       	in	r24, 0x12	; 18
     15c:	80 64       	ori	r24, 0x40	; 64
     15e:	82 bb       	out	0x12, r24	; 18
     160:	00 00       	nop
     162:	82 b3       	in	r24, 0x12	; 18
     164:	8f 7b       	andi	r24, 0xBF	; 191
     166:	82 bb       	out	0x12, r24	; 18
     168:	8d ee       	ldi	r24, 0xED	; 237
     16a:	92 e0       	ldi	r25, 0x02	; 2
     16c:	01 97       	sbiw	r24, 0x01	; 1
     16e:	f1 f7       	brne	.-4      	; 0x16c <LCD_Command+0x20>
     170:	00 c0       	rjmp	.+0      	; 0x172 <LCD_Command+0x26>
     172:	00 00       	nop
     174:	08 95       	ret

00000176 <LCD_Char>:
     176:	85 bb       	out	0x15, r24	; 21
     178:	82 b3       	in	r24, 0x12	; 18
     17a:	84 60       	ori	r24, 0x04	; 4
     17c:	82 bb       	out	0x12, r24	; 18
     17e:	82 b3       	in	r24, 0x12	; 18
     180:	87 7f       	andi	r24, 0xF7	; 247
     182:	82 bb       	out	0x12, r24	; 18
     184:	82 b3       	in	r24, 0x12	; 18
     186:	80 64       	ori	r24, 0x40	; 64
     188:	82 bb       	out	0x12, r24	; 18
     18a:	00 00       	nop
     18c:	82 b3       	in	r24, 0x12	; 18
     18e:	8f 7b       	andi	r24, 0xBF	; 191
     190:	82 bb       	out	0x12, r24	; 18
     192:	89 ef       	ldi	r24, 0xF9	; 249
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	01 97       	sbiw	r24, 0x01	; 1
     198:	f1 f7       	brne	.-4      	; 0x196 <LCD_Char+0x20>
     19a:	00 c0       	rjmp	.+0      	; 0x19c <LCD_Char+0x26>
     19c:	00 00       	nop
     19e:	08 95       	ret

000001a0 <LCD_Init>:
     1a0:	8f ef       	ldi	r24, 0xFF	; 255
     1a2:	81 bb       	out	0x11, r24	; 17
     1a4:	84 bb       	out	0x14, r24	; 20
     1a6:	87 e8       	ldi	r24, 0x87	; 135
     1a8:	93 e1       	ldi	r25, 0x13	; 19
     1aa:	01 97       	sbiw	r24, 0x01	; 1
     1ac:	f1 f7       	brne	.-4      	; 0x1aa <LCD_Init+0xa>
     1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <LCD_Init+0x10>
     1b0:	00 00       	nop
     1b2:	88 e3       	ldi	r24, 0x38	; 56
     1b4:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_Command>
     1b8:	8c e0       	ldi	r24, 0x0C	; 12
     1ba:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_Command>
     1be:	86 e0       	ldi	r24, 0x06	; 6
     1c0:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_Command>
     1c4:	81 e0       	ldi	r24, 0x01	; 1
     1c6:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_Command>
     1ca:	80 e8       	ldi	r24, 0x80	; 128
     1cc:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_Command>
     1d0:	08 95       	ret

000001d2 <LCD_String>:
     1d2:	0f 93       	push	r16
     1d4:	1f 93       	push	r17
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
     1da:	8c 01       	movw	r16, r24
     1dc:	c0 e0       	ldi	r28, 0x00	; 0
     1de:	d0 e0       	ldi	r29, 0x00	; 0
     1e0:	03 c0       	rjmp	.+6      	; 0x1e8 <LCD_String+0x16>
     1e2:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_Char>
     1e6:	21 96       	adiw	r28, 0x01	; 1
     1e8:	f8 01       	movw	r30, r16
     1ea:	ec 0f       	add	r30, r28
     1ec:	fd 1f       	adc	r31, r29
     1ee:	80 81       	ld	r24, Z
     1f0:	81 11       	cpse	r24, r1
     1f2:	f7 cf       	rjmp	.-18     	; 0x1e2 <LCD_String+0x10>
     1f4:	df 91       	pop	r29
     1f6:	cf 91       	pop	r28
     1f8:	1f 91       	pop	r17
     1fa:	0f 91       	pop	r16
     1fc:	08 95       	ret

000001fe <LCD_Clear>:

void LCD_Clear() {
	
	LCD_Command (0x01);		/* clear display */
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_Command>
	LCD_Command (0x80);		/* cursor at home position */
     204:	80 e8       	ldi	r24, 0x80	; 128
     206:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_Command>
     20a:	08 95       	ret

0000020c <Display_on_LCD>:
}

void Display_on_LCD(char line1[], char line2[]) {
     20c:	cf 93       	push	r28
     20e:	df 93       	push	r29
     210:	ec 01       	movw	r28, r24
	
	LCD_Command (0x80);
     212:	80 e8       	ldi	r24, 0x80	; 128
     214:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_Command>
	LCD_String(line1);	/* write string on 1st line of LCD*/
     218:	ce 01       	movw	r24, r28
     21a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_String>
	//LCD_Command(0xC0);		/* Go to 2nd line*/
	//LCD_String(line2);	/* Write string on 2nd line*/
}
     21e:	df 91       	pop	r29
     220:	cf 91       	pop	r28
     222:	08 95       	ret

00000224 <Scroll_Text1>:


char arr[200];
char text_display[16];

void Scroll_Text1(char text_scroll[], int size) {
     224:	2f 92       	push	r2
     226:	3f 92       	push	r3
     228:	ef 92       	push	r14
     22a:	ff 92       	push	r15
     22c:	0f 93       	push	r16
     22e:	1f 93       	push	r17
     230:	cf 93       	push	r28
     232:	df 93       	push	r29
     234:	00 d0       	rcall	.+0      	; 0x236 <Scroll_Text1+0x12>
     236:	00 d0       	rcall	.+0      	; 0x238 <Scroll_Text1+0x14>
     238:	1f 92       	push	r1
     23a:	cd b7       	in	r28, 0x3d	; 61
     23c:	de b7       	in	r29, 0x3e	; 62
     23e:	9c 83       	std	Y+4, r25	; 0x04
     240:	8b 83       	std	Y+3, r24	; 0x03
     242:	7a 83       	std	Y+2, r23	; 0x02
     244:	69 83       	std	Y+1, r22	; 0x01
	//char text_passed[] = text_scroll;
	char space = ' ';
     246:	80 e2       	ldi	r24, 0x20	; 32
     248:	8d 83       	std	Y+5, r24	; 0x05
			text_display[q] = arr[q];
		}
	}
	

	text_arrange();
     24a:	ce 01       	movw	r24, r28
     24c:	01 96       	adiw	r24, 0x01	; 1
     24e:	1c 01       	movw	r2, r24
     250:	0e 94 49 00 	call	0x92	; 0x92 <text_arrange.2103>
	int len2 =  size + 18;
     254:	e9 80       	ldd	r14, Y+1	; 0x01
     256:	fa 80       	ldd	r15, Y+2	; 0x02
     258:	92 e1       	ldi	r25, 0x12	; 18
     25a:	e9 0e       	add	r14, r25
     25c:	f1 1c       	adc	r15, r1
	for(int i = 0; i < len2; i++){
     25e:	00 e0       	ldi	r16, 0x00	; 0
     260:	10 e0       	ldi	r17, 0x00	; 0
     262:	12 c0       	rjmp	.+36     	; 0x288 <Scroll_Text1+0x64>
		remove_items();
     264:	0e 94 78 00 	call	0xf0	; 0xf0 <remove_items.2113>
		process_text();
     268:	0e 94 96 00 	call	0x12c	; 0x12c <process_text.2119>
		Display_on_LCD(text_display, "");
     26c:	6d ed       	ldi	r22, 0xDD	; 221
     26e:	70 e0       	ldi	r23, 0x00	; 0
     270:	8e ea       	ldi	r24, 0xAE	; 174
     272:	91 e0       	ldi	r25, 0x01	; 1
     274:	0e 94 06 01 	call	0x20c	; 0x20c <Display_on_LCD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     278:	83 ed       	ldi	r24, 0xD3	; 211
     27a:	90 e3       	ldi	r25, 0x30	; 48
     27c:	01 97       	sbiw	r24, 0x01	; 1
     27e:	f1 f7       	brne	.-4      	; 0x27c <Scroll_Text1+0x58>
     280:	00 c0       	rjmp	.+0      	; 0x282 <Scroll_Text1+0x5e>
     282:	00 00       	nop
	}
	

	text_arrange();
	int len2 =  size + 18;
	for(int i = 0; i < len2; i++){
     284:	0f 5f       	subi	r16, 0xFF	; 255
     286:	1f 4f       	sbci	r17, 0xFF	; 255
     288:	0e 15       	cp	r16, r14
     28a:	1f 05       	cpc	r17, r15
     28c:	5c f3       	brlt	.-42     	; 0x264 <Scroll_Text1+0x40>
		remove_items();
		process_text();
		Display_on_LCD(text_display, "");
		_delay_ms(50);
	}
}
     28e:	0f 90       	pop	r0
     290:	0f 90       	pop	r0
     292:	0f 90       	pop	r0
     294:	0f 90       	pop	r0
     296:	0f 90       	pop	r0
     298:	df 91       	pop	r29
     29a:	cf 91       	pop	r28
     29c:	1f 91       	pop	r17
     29e:	0f 91       	pop	r16
     2a0:	ff 90       	pop	r15
     2a2:	ef 90       	pop	r14
     2a4:	3f 90       	pop	r3
     2a6:	2f 90       	pop	r2
     2a8:	08 95       	ret

000002aa <Print_on_LCD>:

//--------------------------------------------------------------------------

int check_res, check_temp, check_ove;
void Print_on_LCD(int read_res, int read_temp, int read_overl) {
     2aa:	cf 92       	push	r12
     2ac:	df 92       	push	r13
     2ae:	ef 92       	push	r14
     2b0:	ff 92       	push	r15
     2b2:	0f 93       	push	r16
     2b4:	1f 93       	push	r17
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
     2ba:	cd b7       	in	r28, 0x3d	; 61
     2bc:	de b7       	in	r29, 0x3e	; 62
     2be:	cb 55       	subi	r28, 0x5B	; 91
     2c0:	d1 09       	sbc	r29, r1
     2c2:	0f b6       	in	r0, 0x3f	; 63
     2c4:	f8 94       	cli
     2c6:	de bf       	out	0x3e, r29	; 62
     2c8:	0f be       	out	0x3f, r0	; 63
     2ca:	cd bf       	out	0x3d, r28	; 61
     2cc:	7c 01       	movw	r14, r24
     2ce:	8b 01       	movw	r16, r22
     2d0:	6a 01       	movw	r12, r20
	
	//changing
	char speed[] = "Spd:";
     2d2:	85 e0       	ldi	r24, 0x05	; 5
     2d4:	e8 e7       	ldi	r30, 0x78	; 120
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	de 01       	movw	r26, r28
     2da:	11 96       	adiw	r26, 0x01	; 1
     2dc:	01 90       	ld	r0, Z+
     2de:	0d 92       	st	X+, r0
     2e0:	8a 95       	dec	r24
     2e2:	e1 f7       	brne	.-8      	; 0x2dc <Print_on_LCD+0x32>
	char temp[] = "Te:";
     2e4:	84 e5       	ldi	r24, 0x54	; 84
     2e6:	95 e6       	ldi	r25, 0x65	; 101
     2e8:	9f 83       	std	Y+7, r25	; 0x07
     2ea:	8e 83       	std	Y+6, r24	; 0x06
     2ec:	8a e3       	ldi	r24, 0x3A	; 58
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	99 87       	std	Y+9, r25	; 0x09
     2f2:	88 87       	std	Y+8, r24	; 0x08
	char motor[] = "Mot:";
     2f4:	85 e0       	ldi	r24, 0x05	; 5
     2f6:	ed e7       	ldi	r30, 0x7D	; 125
     2f8:	f0 e0       	ldi	r31, 0x00	; 0
     2fa:	de 01       	movw	r26, r28
     2fc:	1a 96       	adiw	r26, 0x0a	; 10
     2fe:	01 90       	ld	r0, Z+
     300:	0d 92       	st	X+, r0
     302:	8a 95       	dec	r24
     304:	e1 f7       	brne	.-8      	; 0x2fe <Print_on_LCD+0x54>
	char speed2[4];
	char temp2[4];
	char motorR[] = " Running";
     306:	89 e0       	ldi	r24, 0x09	; 9
     308:	e2 e8       	ldi	r30, 0x82	; 130
     30a:	f0 e0       	ldi	r31, 0x00	; 0
     30c:	de 01       	movw	r26, r28
     30e:	57 96       	adiw	r26, 0x17	; 23
     310:	01 90       	ld	r0, Z+
     312:	0d 92       	st	X+, r0
     314:	8a 95       	dec	r24
     316:	e1 f7       	brne	.-8      	; 0x310 <Print_on_LCD+0x66>
	char motorOL[] = " Overload";
     318:	8a e0       	ldi	r24, 0x0A	; 10
     31a:	eb e8       	ldi	r30, 0x8B	; 139
     31c:	f0 e0       	ldi	r31, 0x00	; 0
     31e:	de 01       	movw	r26, r28
     320:	90 96       	adiw	r26, 0x20	; 32
     322:	01 90       	ld	r0, Z+
     324:	0d 92       	st	X+, r0
     326:	8a 95       	dec	r24
     328:	e1 f7       	brne	.-8      	; 0x322 <Print_on_LCD+0x78>
	char motorOT[] = " OverTemp";
     32a:	8a e0       	ldi	r24, 0x0A	; 10
     32c:	e5 e9       	ldi	r30, 0x95	; 149
     32e:	f0 e0       	ldi	r31, 0x00	; 0
     330:	de 01       	movw	r26, r28
     332:	9a 96       	adiw	r26, 0x2a	; 42
     334:	01 90       	ld	r0, Z+
     336:	0d 92       	st	X+, r0
     338:	8a 95       	dec	r24
     33a:	e1 f7       	brne	.-8      	; 0x334 <Print_on_LCD+0x8a>
	char line1_text[20] = "                    ";
     33c:	84 e1       	ldi	r24, 0x14	; 20
     33e:	e0 e6       	ldi	r30, 0x60	; 96
     340:	f0 e0       	ldi	r31, 0x00	; 0
     342:	de 01       	movw	r26, r28
     344:	d4 96       	adiw	r26, 0x34	; 52
     346:	01 90       	ld	r0, Z+
     348:	0d 92       	st	X+, r0
     34a:	8a 95       	dec	r24
     34c:	e1 f7       	brne	.-8      	; 0x346 <Print_on_LCD+0x9c>
	char line2_text[20] = "                    ";
     34e:	84 e1       	ldi	r24, 0x14	; 20
     350:	e0 e6       	ldi	r30, 0x60	; 96
     352:	f0 e0       	ldi	r31, 0x00	; 0
     354:	de 01       	movw	r26, r28
     356:	a8 5b       	subi	r26, 0xB8	; 184
     358:	bf 4f       	sbci	r27, 0xFF	; 255
     35a:	01 90       	ld	r0, Z+
     35c:	0d 92       	st	X+, r0
     35e:	8a 95       	dec	r24
     360:	e1 f7       	brne	.-8      	; 0x35a <Print_on_LCD+0xb0>
	
	//speed [resistor value] print on lcd
	sprintf(speed2,"%d", read_res);
     362:	ff 92       	push	r15
     364:	ef 92       	push	r14
     366:	85 e7       	ldi	r24, 0x75	; 117
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	9f 93       	push	r25
     36c:	8f 93       	push	r24
     36e:	ce 01       	movw	r24, r28
     370:	0f 96       	adiw	r24, 0x0f	; 15
     372:	9f 93       	push	r25
     374:	8f 93       	push	r24
     376:	0e 94 39 06 	call	0xc72	; 0xc72 <sprintf>
	if(read_res < 10){speed2[1] = ' '; speed2[2] = ' ';}
     37a:	0f 90       	pop	r0
     37c:	0f 90       	pop	r0
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
     384:	0f 90       	pop	r0
     386:	4a e0       	ldi	r20, 0x0A	; 10
     388:	e4 16       	cp	r14, r20
     38a:	f1 04       	cpc	r15, r1
     38c:	1c f4       	brge	.+6      	; 0x394 <Print_on_LCD+0xea>
     38e:	80 e2       	ldi	r24, 0x20	; 32
     390:	88 8b       	std	Y+16, r24	; 0x10
     392:	89 8b       	std	Y+17, r24	; 0x11
	if(read_res < 100){speed2[2] = ' ';}
     394:	54 e6       	ldi	r21, 0x64	; 100
     396:	e5 16       	cp	r14, r21
     398:	f1 04       	cpc	r15, r1
     39a:	14 f4       	brge	.+4      	; 0x3a0 <Print_on_LCD+0xf6>
     39c:	80 e2       	ldi	r24, 0x20	; 32
     39e:	89 8b       	std	Y+17, r24	; 0x11
}

//--------------------------------------------------------------------------

int check_res, check_temp, check_ove;
void Print_on_LCD(int read_res, int read_temp, int read_overl) {
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	0f c0       	rjmp	.+30     	; 0x3c4 <Print_on_LCD+0x11a>
	sprintf(speed2,"%d", read_res);
	if(read_res < 10){speed2[1] = ' '; speed2[2] = ' ';}
	if(read_res < 100){speed2[2] = ' ';}
	
	for(int i = 0; i < 4; i++){
		line1_text[i] = speed[i];
     3a6:	e1 e0       	ldi	r30, 0x01	; 1
     3a8:	f0 e0       	ldi	r31, 0x00	; 0
     3aa:	ec 0f       	add	r30, r28
     3ac:	fd 1f       	adc	r31, r29
     3ae:	e8 0f       	add	r30, r24
     3b0:	f9 1f       	adc	r31, r25
     3b2:	20 81       	ld	r18, Z
     3b4:	e4 e3       	ldi	r30, 0x34	; 52
     3b6:	f0 e0       	ldi	r31, 0x00	; 0
     3b8:	ec 0f       	add	r30, r28
     3ba:	fd 1f       	adc	r31, r29
     3bc:	e8 0f       	add	r30, r24
     3be:	f9 1f       	adc	r31, r25
     3c0:	20 83       	st	Z, r18
	//speed [resistor value] print on lcd
	sprintf(speed2,"%d", read_res);
	if(read_res < 10){speed2[1] = ' '; speed2[2] = ' ';}
	if(read_res < 100){speed2[2] = ' ';}
	
	for(int i = 0; i < 4; i++){
     3c2:	01 96       	adiw	r24, 0x01	; 1
     3c4:	84 30       	cpi	r24, 0x04	; 4
     3c6:	91 05       	cpc	r25, r1
     3c8:	74 f3       	brlt	.-36     	; 0x3a6 <Print_on_LCD+0xfc>
     3ca:	80 e0       	ldi	r24, 0x00	; 0
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	11 c0       	rjmp	.+34     	; 0x3f2 <Print_on_LCD+0x148>
		line1_text[i] = speed[i];
	}
	for(int j = 0; j < 3; j++){
		line1_text[j+4] = speed2[j];
     3d0:	fc 01       	movw	r30, r24
     3d2:	34 96       	adiw	r30, 0x04	; 4
     3d4:	af e0       	ldi	r26, 0x0F	; 15
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	ac 0f       	add	r26, r28
     3da:	bd 1f       	adc	r27, r29
     3dc:	a8 0f       	add	r26, r24
     3de:	b9 1f       	adc	r27, r25
     3e0:	2c 91       	ld	r18, X
     3e2:	44 e3       	ldi	r20, 0x34	; 52
     3e4:	50 e0       	ldi	r21, 0x00	; 0
     3e6:	4c 0f       	add	r20, r28
     3e8:	5d 1f       	adc	r21, r29
     3ea:	e4 0f       	add	r30, r20
     3ec:	f5 1f       	adc	r31, r21
     3ee:	20 83       	st	Z, r18
	if(read_res < 100){speed2[2] = ' ';}
	
	for(int i = 0; i < 4; i++){
		line1_text[i] = speed[i];
	}
	for(int j = 0; j < 3; j++){
     3f0:	01 96       	adiw	r24, 0x01	; 1
     3f2:	83 30       	cpi	r24, 0x03	; 3
     3f4:	91 05       	cpc	r25, r1
     3f6:	64 f3       	brlt	.-40     	; 0x3d0 <Print_on_LCD+0x126>
		line1_text[j+4] = speed2[j];
	}
	
	//temp print on lcd
	sprintf(temp2,"%d", read_temp);
     3f8:	1f 93       	push	r17
     3fa:	0f 93       	push	r16
     3fc:	85 e7       	ldi	r24, 0x75	; 117
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	9f 93       	push	r25
     402:	8f 93       	push	r24
     404:	ce 01       	movw	r24, r28
     406:	43 96       	adiw	r24, 0x13	; 19
     408:	9f 93       	push	r25
     40a:	8f 93       	push	r24
     40c:	0e 94 39 06 	call	0xc72	; 0xc72 <sprintf>
	if(read_temp < 10) {temp2[1] = ' '; temp2[2] = ' ';}
     410:	0f 90       	pop	r0
     412:	0f 90       	pop	r0
     414:	0f 90       	pop	r0
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
     41a:	0f 90       	pop	r0
     41c:	0a 30       	cpi	r16, 0x0A	; 10
     41e:	11 05       	cpc	r17, r1
     420:	1c f4       	brge	.+6      	; 0x428 <__DATA_REGION_LENGTH__+0x28>
     422:	80 e2       	ldi	r24, 0x20	; 32
     424:	8c 8b       	std	Y+20, r24	; 0x14
     426:	8d 8b       	std	Y+21, r24	; 0x15
	if(read_temp < 100) {temp2[2] = ' ';}
     428:	04 36       	cpi	r16, 0x64	; 100
     42a:	11 05       	cpc	r17, r1
     42c:	14 f4       	brge	.+4      	; 0x432 <__DATA_REGION_LENGTH__+0x32>
     42e:	80 e2       	ldi	r24, 0x20	; 32
     430:	8d 8b       	std	Y+21, r24	; 0x15
     432:	80 e0       	ldi	r24, 0x00	; 0
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	11 c0       	rjmp	.+34     	; 0x45a <__DATA_REGION_LENGTH__+0x5a>
	
	for(int k = 0; k < 3; k++){
		line1_text[9+k] = temp[k];
     438:	fc 01       	movw	r30, r24
     43a:	39 96       	adiw	r30, 0x09	; 9
     43c:	a6 e0       	ldi	r26, 0x06	; 6
     43e:	b0 e0       	ldi	r27, 0x00	; 0
     440:	ac 0f       	add	r26, r28
     442:	bd 1f       	adc	r27, r29
     444:	a8 0f       	add	r26, r24
     446:	b9 1f       	adc	r27, r25
     448:	2c 91       	ld	r18, X
     44a:	44 e3       	ldi	r20, 0x34	; 52
     44c:	50 e0       	ldi	r21, 0x00	; 0
     44e:	4c 0f       	add	r20, r28
     450:	5d 1f       	adc	r21, r29
     452:	e4 0f       	add	r30, r20
     454:	f5 1f       	adc	r31, r21
     456:	20 83       	st	Z, r18
	//temp print on lcd
	sprintf(temp2,"%d", read_temp);
	if(read_temp < 10) {temp2[1] = ' '; temp2[2] = ' ';}
	if(read_temp < 100) {temp2[2] = ' ';}
	
	for(int k = 0; k < 3; k++){
     458:	01 96       	adiw	r24, 0x01	; 1
     45a:	83 30       	cpi	r24, 0x03	; 3
     45c:	91 05       	cpc	r25, r1
     45e:	64 f3       	brlt	.-40     	; 0x438 <__DATA_REGION_LENGTH__+0x38>
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	11 c0       	rjmp	.+34     	; 0x488 <__stack+0x29>
		line1_text[9+k] = temp[k];
	}
	for(int l = 0; l < 3; l++){
		line1_text[12+l] = temp2[l];
     466:	fc 01       	movw	r30, r24
     468:	3c 96       	adiw	r30, 0x0c	; 12
     46a:	a3 e1       	ldi	r26, 0x13	; 19
     46c:	b0 e0       	ldi	r27, 0x00	; 0
     46e:	ac 0f       	add	r26, r28
     470:	bd 1f       	adc	r27, r29
     472:	a8 0f       	add	r26, r24
     474:	b9 1f       	adc	r27, r25
     476:	2c 91       	ld	r18, X
     478:	44 e3       	ldi	r20, 0x34	; 52
     47a:	50 e0       	ldi	r21, 0x00	; 0
     47c:	4c 0f       	add	r20, r28
     47e:	5d 1f       	adc	r21, r29
     480:	e4 0f       	add	r30, r20
     482:	f5 1f       	adc	r31, r21
     484:	20 83       	st	Z, r18
	if(read_temp < 100) {temp2[2] = ' ';}
	
	for(int k = 0; k < 3; k++){
		line1_text[9+k] = temp[k];
	}
	for(int l = 0; l < 3; l++){
     486:	01 96       	adiw	r24, 0x01	; 1
     488:	83 30       	cpi	r24, 0x03	; 3
     48a:	91 05       	cpc	r25, r1
     48c:	64 f3       	brlt	.-40     	; 0x466 <__stack+0x7>
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	0f c0       	rjmp	.+30     	; 0x4b2 <__stack+0x53>
		line1_text[12+l] = temp2[l];
	}
	
	//motor state print on lcd
	for(int m = 0; m < 4; m++){
		line2_text[m] = motor[m];
     494:	ea e0       	ldi	r30, 0x0A	; 10
     496:	f0 e0       	ldi	r31, 0x00	; 0
     498:	ec 0f       	add	r30, r28
     49a:	fd 1f       	adc	r31, r29
     49c:	e8 0f       	add	r30, r24
     49e:	f9 1f       	adc	r31, r25
     4a0:	20 81       	ld	r18, Z
     4a2:	e8 e4       	ldi	r30, 0x48	; 72
     4a4:	f0 e0       	ldi	r31, 0x00	; 0
     4a6:	ec 0f       	add	r30, r28
     4a8:	fd 1f       	adc	r31, r29
     4aa:	e8 0f       	add	r30, r24
     4ac:	f9 1f       	adc	r31, r25
     4ae:	20 83       	st	Z, r18
	for(int l = 0; l < 3; l++){
		line1_text[12+l] = temp2[l];
	}
	
	//motor state print on lcd
	for(int m = 0; m < 4; m++){
     4b0:	01 96       	adiw	r24, 0x01	; 1
     4b2:	84 30       	cpi	r24, 0x04	; 4
     4b4:	91 05       	cpc	r25, r1
     4b6:	74 f3       	brlt	.-36     	; 0x494 <__stack+0x35>
		line2_text[m] = motor[m];
	}
	if(read_overl == 1){
     4b8:	51 e0       	ldi	r21, 0x01	; 1
     4ba:	c5 16       	cp	r12, r21
     4bc:	d1 04       	cpc	r13, r1
     4be:	c9 f4       	brne	.+50     	; 0x4f2 <__stack+0x93>
     4c0:	12 c0       	rjmp	.+36     	; 0x4e6 <__stack+0x87>
		for(int n = 0; n < 9; n++){
			line2_text[4+n] = motorOL[n];
     4c2:	fc 01       	movw	r30, r24
     4c4:	34 96       	adiw	r30, 0x04	; 4
     4c6:	a0 e2       	ldi	r26, 0x20	; 32
     4c8:	b0 e0       	ldi	r27, 0x00	; 0
     4ca:	ac 0f       	add	r26, r28
     4cc:	bd 1f       	adc	r27, r29
     4ce:	a8 0f       	add	r26, r24
     4d0:	b9 1f       	adc	r27, r25
     4d2:	2c 91       	ld	r18, X
     4d4:	48 e4       	ldi	r20, 0x48	; 72
     4d6:	50 e0       	ldi	r21, 0x00	; 0
     4d8:	4c 0f       	add	r20, r28
     4da:	5d 1f       	adc	r21, r29
     4dc:	e4 0f       	add	r30, r20
     4de:	f5 1f       	adc	r31, r21
     4e0:	20 83       	st	Z, r18
	//motor state print on lcd
	for(int m = 0; m < 4; m++){
		line2_text[m] = motor[m];
	}
	if(read_overl == 1){
		for(int n = 0; n < 9; n++){
     4e2:	01 96       	adiw	r24, 0x01	; 1
     4e4:	02 c0       	rjmp	.+4      	; 0x4ea <__stack+0x8b>
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	89 30       	cpi	r24, 0x09	; 9
     4ec:	91 05       	cpc	r25, r1
     4ee:	4c f3       	brlt	.-46     	; 0x4c2 <__stack+0x63>
     4f0:	32 c0       	rjmp	.+100    	; 0x556 <__stack+0xf7>
			line2_text[4+n] = motorOL[n];
		}
	}
	else if(read_temp >= 100){ // over temp when more than
     4f2:	04 36       	cpi	r16, 0x64	; 100
     4f4:	11 05       	cpc	r17, r1
     4f6:	ac f4       	brge	.+42     	; 0x522 <__stack+0xc3>
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	29 c0       	rjmp	.+82     	; 0x550 <__stack+0xf1>
		for(int n = 0; n < 9; n++){
			line2_text[4+n] = motorOT[n];
     4fe:	fc 01       	movw	r30, r24
     500:	34 96       	adiw	r30, 0x04	; 4
     502:	aa e2       	ldi	r26, 0x2A	; 42
     504:	b0 e0       	ldi	r27, 0x00	; 0
     506:	ac 0f       	add	r26, r28
     508:	bd 1f       	adc	r27, r29
     50a:	a8 0f       	add	r26, r24
     50c:	b9 1f       	adc	r27, r25
     50e:	2c 91       	ld	r18, X
     510:	48 e4       	ldi	r20, 0x48	; 72
     512:	50 e0       	ldi	r21, 0x00	; 0
     514:	4c 0f       	add	r20, r28
     516:	5d 1f       	adc	r21, r29
     518:	e4 0f       	add	r30, r20
     51a:	f5 1f       	adc	r31, r21
     51c:	20 83       	st	Z, r18
		for(int n = 0; n < 9; n++){
			line2_text[4+n] = motorOL[n];
		}
	}
	else if(read_temp >= 100){ // over temp when more than
		for(int n = 0; n < 9; n++){
     51e:	01 96       	adiw	r24, 0x01	; 1
     520:	02 c0       	rjmp	.+4      	; 0x526 <__stack+0xc7>
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	89 30       	cpi	r24, 0x09	; 9
     528:	91 05       	cpc	r25, r1
     52a:	4c f3       	brlt	.-46     	; 0x4fe <__stack+0x9f>
     52c:	14 c0       	rjmp	.+40     	; 0x556 <__stack+0xf7>
			line2_text[4+n] = motorOT[n];
		}
	}
	else{
		for(int n = 0; n < 8; n++){
			line2_text[4+n] = motorR[n];
     52e:	fc 01       	movw	r30, r24
     530:	34 96       	adiw	r30, 0x04	; 4
     532:	a7 e1       	ldi	r26, 0x17	; 23
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	ac 0f       	add	r26, r28
     538:	bd 1f       	adc	r27, r29
     53a:	a8 0f       	add	r26, r24
     53c:	b9 1f       	adc	r27, r25
     53e:	2c 91       	ld	r18, X
     540:	48 e4       	ldi	r20, 0x48	; 72
     542:	50 e0       	ldi	r21, 0x00	; 0
     544:	4c 0f       	add	r20, r28
     546:	5d 1f       	adc	r21, r29
     548:	e4 0f       	add	r30, r20
     54a:	f5 1f       	adc	r31, r21
     54c:	20 83       	st	Z, r18
		for(int n = 0; n < 9; n++){
			line2_text[4+n] = motorOT[n];
		}
	}
	else{
		for(int n = 0; n < 8; n++){
     54e:	01 96       	adiw	r24, 0x01	; 1
     550:	88 30       	cpi	r24, 0x08	; 8
     552:	91 05       	cpc	r25, r1
     554:	64 f3       	brlt	.-40     	; 0x52e <__stack+0xcf>
			line2_text[4+n] = motorR[n];
		}
	}
	
	if(read_res < 10){line1_text[5] = '%';}
     556:	5a e0       	ldi	r21, 0x0A	; 10
     558:	e5 16       	cp	r14, r21
     55a:	f1 04       	cpc	r15, r1
     55c:	1c f4       	brge	.+6      	; 0x564 <__stack+0x105>
     55e:	85 e2       	ldi	r24, 0x25	; 37
     560:	89 af       	std	Y+57, r24	; 0x39
     562:	09 c0       	rjmp	.+18     	; 0x576 <__stack+0x117>
	else if(read_res < 100){line1_text[6] = '%';}
     564:	84 e6       	ldi	r24, 0x64	; 100
     566:	e8 16       	cp	r14, r24
     568:	f1 04       	cpc	r15, r1
     56a:	1c f4       	brge	.+6      	; 0x572 <__stack+0x113>
     56c:	85 e2       	ldi	r24, 0x25	; 37
     56e:	8a af       	std	Y+58, r24	; 0x3a
     570:	02 c0       	rjmp	.+4      	; 0x576 <__stack+0x117>
	else {line1_text[7] = '%';}
     572:	85 e2       	ldi	r24, 0x25	; 37
     574:	8b af       	std	Y+59, r24	; 0x3b
	
	if(read_temp < 10){line1_text[13] = 'C';}
     576:	0a 30       	cpi	r16, 0x0A	; 10
     578:	11 05       	cpc	r17, r1
     57a:	2c f4       	brge	.+10     	; 0x586 <__stack+0x127>
     57c:	83 e4       	ldi	r24, 0x43	; 67
     57e:	22 96       	adiw	r28, 0x02	; 2
     580:	8f af       	std	Y+63, r24	; 0x3f
     582:	22 97       	sbiw	r28, 0x02	; 2
     584:	0c c0       	rjmp	.+24     	; 0x59e <__stack+0x13f>
	else if(read_temp < 100){line1_text[14] = 'C';}
     586:	04 36       	cpi	r16, 0x64	; 100
     588:	11 05       	cpc	r17, r1
     58a:	2c f4       	brge	.+10     	; 0x596 <__stack+0x137>
     58c:	83 e4       	ldi	r24, 0x43	; 67
     58e:	23 96       	adiw	r28, 0x03	; 3
     590:	8f af       	std	Y+63, r24	; 0x3f
     592:	23 97       	sbiw	r28, 0x03	; 3
     594:	04 c0       	rjmp	.+8      	; 0x59e <__stack+0x13f>
	else {line1_text[15] = 'C';}
     596:	83 e4       	ldi	r24, 0x43	; 67
     598:	24 96       	adiw	r28, 0x04	; 4
     59a:	8f af       	std	Y+63, r24	; 0x3f
     59c:	24 97       	sbiw	r28, 0x04	; 4
	
	if(read_res != check_res || read_temp != check_temp || read_overl != check_ove){
     59e:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <check_res>
     5a2:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <check_res+0x1>
     5a6:	e8 16       	cp	r14, r24
     5a8:	f9 06       	cpc	r15, r25
     5aa:	71 f4       	brne	.+28     	; 0x5c8 <__stack+0x169>
     5ac:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <check_temp>
     5b0:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <check_temp+0x1>
     5b4:	08 17       	cp	r16, r24
     5b6:	19 07       	cpc	r17, r25
     5b8:	39 f4       	brne	.+14     	; 0x5c8 <__stack+0x169>
     5ba:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <check_ove>
     5be:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <check_ove+0x1>
     5c2:	c8 16       	cp	r12, r24
     5c4:	d9 06       	cpc	r13, r25
     5c6:	d9 f0       	breq	.+54     	; 0x5fe <__stack+0x19f>
		LCD_Command (0x80);
     5c8:	80 e8       	ldi	r24, 0x80	; 128
     5ca:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_Command>
		LCD_String(line1_text);
     5ce:	ce 01       	movw	r24, r28
     5d0:	c4 96       	adiw	r24, 0x34	; 52
     5d2:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_String>
		LCD_Command(0xC0);
     5d6:	80 ec       	ldi	r24, 0xC0	; 192
     5d8:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_Command>
		LCD_String(line2_text);
     5dc:	ce 01       	movw	r24, r28
     5de:	88 5b       	subi	r24, 0xB8	; 184
     5e0:	9f 4f       	sbci	r25, 0xFF	; 255
     5e2:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_String>
		check_res = read_res; check_temp = read_temp; check_ove = read_overl;
     5e6:	f0 92 a9 01 	sts	0x01A9, r15	; 0x8001a9 <check_res+0x1>
     5ea:	e0 92 a8 01 	sts	0x01A8, r14	; 0x8001a8 <check_res>
     5ee:	10 93 c3 01 	sts	0x01C3, r17	; 0x8001c3 <check_temp+0x1>
     5f2:	00 93 c2 01 	sts	0x01C2, r16	; 0x8001c2 <check_temp>
     5f6:	d0 92 c5 01 	sts	0x01C5, r13	; 0x8001c5 <check_ove+0x1>
     5fa:	c0 92 c4 01 	sts	0x01C4, r12	; 0x8001c4 <check_ove>
		//this if statement for update the LCD display only if some value has changed.
	}
}
     5fe:	c5 5a       	subi	r28, 0xA5	; 165
     600:	df 4f       	sbci	r29, 0xFF	; 255
     602:	0f b6       	in	r0, 0x3f	; 63
     604:	f8 94       	cli
     606:	de bf       	out	0x3e, r29	; 62
     608:	0f be       	out	0x3f, r0	; 63
     60a:	cd bf       	out	0x3d, r28	; 61
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	1f 91       	pop	r17
     612:	0f 91       	pop	r16
     614:	ff 90       	pop	r15
     616:	ef 90       	pop	r14
     618:	df 90       	pop	r13
     61a:	cf 90       	pop	r12
     61c:	08 95       	ret

0000061e <DC_motor>:

int motor_current_rotation_direction;
int motor_current_speed;
void DC_motor(int diection, int speed) {
	//speed
	motor_current_rotation_direction = diection;
     61e:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <motor_current_rotation_direction+0x1>
     622:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <motor_current_rotation_direction>
	motor_current_speed = speed;
     626:	70 93 df 00 	sts	0x00DF, r23	; 0x8000df <__data_end+0x1>
     62a:	60 93 de 00 	sts	0x00DE, r22	; 0x8000de <__data_end>
	if (diection == 1) {
     62e:	81 30       	cpi	r24, 0x01	; 1
     630:	91 05       	cpc	r25, r1
     632:	39 f4       	brne	.+14     	; 0x642 <DC_motor+0x24>
		PORTB &= ~(1 << MOTOR_PIN1);
     634:	88 b3       	in	r24, 0x18	; 24
     636:	8e 7f       	andi	r24, 0xFE	; 254
     638:	88 bb       	out	0x18, r24	; 24
		PORTB |= (1 << MOTOR_PIN2);
     63a:	88 b3       	in	r24, 0x18	; 24
     63c:	82 60       	ori	r24, 0x02	; 2
     63e:	88 bb       	out	0x18, r24	; 24
     640:	0f c0       	rjmp	.+30     	; 0x660 <DC_motor+0x42>
	}
	else if (diection == 2){
     642:	02 97       	sbiw	r24, 0x02	; 2
     644:	39 f4       	brne	.+14     	; 0x654 <DC_motor+0x36>
		PORTB |= (1 << MOTOR_PIN1);
     646:	88 b3       	in	r24, 0x18	; 24
     648:	81 60       	ori	r24, 0x01	; 1
     64a:	88 bb       	out	0x18, r24	; 24
		PORTB &= ~(1 << MOTOR_PIN2);
     64c:	88 b3       	in	r24, 0x18	; 24
     64e:	8d 7f       	andi	r24, 0xFD	; 253
     650:	88 bb       	out	0x18, r24	; 24
     652:	06 c0       	rjmp	.+12     	; 0x660 <DC_motor+0x42>
	}
	else {  // break
		PORTB &= ~(1 << MOTOR_PIN1);
     654:	88 b3       	in	r24, 0x18	; 24
     656:	8e 7f       	andi	r24, 0xFE	; 254
     658:	88 bb       	out	0x18, r24	; 24
		PORTB &= ~(1 << MOTOR_PIN2);
     65a:	88 b3       	in	r24, 0x18	; 24
     65c:	8d 7f       	andi	r24, 0xFD	; 253
     65e:	88 bb       	out	0x18, r24	; 24
	}
	if(speed >= 255){
     660:	6f 3f       	cpi	r22, 0xFF	; 255
     662:	71 05       	cpc	r23, r1
     664:	14 f0       	brlt	.+4      	; 0x66a <DC_motor+0x4c>
		speed = 255;
     666:	6f ef       	ldi	r22, 0xFF	; 255
     668:	70 e0       	ldi	r23, 0x00	; 0
	}
	OCR0 = speed;
     66a:	6c bf       	out	0x3c, r22	; 60
     66c:	08 95       	ret

0000066e <Read_resistor>:

//-------------------------------------------------------- Sensor reading Functions [Start] -----------------------------------------------------


int Read_resistor(){
	ADMUX = ((1 << REFS0) | (1 << REFS1)| (1 << ADLAR)); //enable A0 pin to readings and enable internal ref
     66e:	80 ee       	ldi	r24, 0xE0	; 224
     670:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADEN);
     672:	86 b1       	in	r24, 0x06	; 6
     674:	80 68       	ori	r24, 0x80	; 128
     676:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADSC);
     678:	86 b1       	in	r24, 0x06	; 6
     67a:	80 64       	ori	r24, 0x40	; 64
     67c:	86 b9       	out	0x06, r24	; 6
	while(ADCSRA & (1 << ADSC));
     67e:	36 99       	sbic	0x06, 6	; 6
     680:	fe cf       	rjmp	.-4      	; 0x67e <Read_resistor+0x10>
	ADCSRA|=(1<<ADIF);
     682:	86 b1       	in	r24, 0x06	; 6
     684:	80 61       	ori	r24, 0x10	; 16
     686:	86 b9       	out	0x06, r24	; 6
	return ADCH / 2.55; // converting 0-255 range value to 0-100 value.
     688:	65 b1       	in	r22, 0x05	; 5
     68a:	70 e0       	ldi	r23, 0x00	; 0
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	0e 94 40 05 	call	0xa80	; 0xa80 <__floatsisf>
     694:	23 e3       	ldi	r18, 0x33	; 51
     696:	33 e3       	ldi	r19, 0x33	; 51
     698:	43 e2       	ldi	r20, 0x23	; 35
     69a:	50 e4       	ldi	r21, 0x40	; 64
     69c:	0e 94 96 04 	call	0x92c	; 0x92c <__divsf3>
     6a0:	0e 94 08 05 	call	0xa10	; 0xa10 <__fixsfsi>
}
     6a4:	cb 01       	movw	r24, r22
     6a6:	08 95       	ret

000006a8 <Read_temprature>:

int Read_temprature(){ // not yet finished function
	ADMUX = ((1 << REFS0) | (1 << REFS1) | (1 << ADLAR) | (1 << MUX0)); //enable A1 pin to readings ENABLE internal ref
     6a8:	81 ee       	ldi	r24, 0xE1	; 225
     6aa:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADEN);
     6ac:	86 b1       	in	r24, 0x06	; 6
     6ae:	80 68       	ori	r24, 0x80	; 128
     6b0:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADSC);
     6b2:	86 b1       	in	r24, 0x06	; 6
     6b4:	80 64       	ori	r24, 0x40	; 64
     6b6:	86 b9       	out	0x06, r24	; 6
	while(ADCSRA & (1 << ADSC));
     6b8:	36 99       	sbic	0x06, 6	; 6
     6ba:	fe cf       	rjmp	.-4      	; 0x6b8 <Read_temprature+0x10>
	ADCSRA|=(1<<ADIF);
     6bc:	86 b1       	in	r24, 0x06	; 6
     6be:	80 61       	ori	r24, 0x10	; 16
     6c0:	86 b9       	out	0x06, r24	; 6
	return ADCH; // converting 0-255 range value to 0-100 value.
     6c2:	85 b1       	in	r24, 0x05	; 5
}
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	08 95       	ret

000006c8 <Read_overload>:

int Read_overload(){ // not yet finished function
	int reading = (PINB & (1 << PINB2));
	if(reading){
     6c8:	b2 9b       	sbis	0x16, 2	; 22
     6ca:	03 c0       	rjmp	.+6      	; 0x6d2 <Read_overload+0xa>
		return 0;
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	08 95       	ret
	}
	else {
		return 1;
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     6d6:	08 95       	ret

000006d8 <Motor_overload_event>:
		speed = 255;
	}
	OCR0 = speed;
}

void Motor_overload_event(){ // not yet finished function
     6d8:	cf 93       	push	r28
     6da:	df 93       	push	r29
	overload_val = 1;
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <overload_val+0x1>
     6e4:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <overload_val>
	DC_motor(0, 0);
     6e8:	60 e0       	ldi	r22, 0x00	; 0
     6ea:	70 e0       	ldi	r23, 0x00	; 0
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	0e 94 0f 03 	call	0x61e	; 0x61e <DC_motor>
	while(Read_overload()){  //loop until overload end
     6f4:	18 c0       	rjmp	.+48     	; 0x726 <Motor_overload_event+0x4e>
		Print_on_LCD(0, Read_temprature(), overload_val); // updating temperature even while inside the while loop.
     6f6:	c0 91 cc 01 	lds	r28, 0x01CC	; 0x8001cc <overload_val>
     6fa:	d0 91 cd 01 	lds	r29, 0x01CD	; 0x8001cd <overload_val+0x1>
     6fe:	0e 94 54 03 	call	0x6a8	; 0x6a8 <Read_temprature>
     702:	ae 01       	movw	r20, r28
     704:	bc 01       	movw	r22, r24
     706:	80 e0       	ldi	r24, 0x00	; 0
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	0e 94 55 01 	call	0x2aa	; 0x2aa <Print_on_LCD>
		DC_motor(0, 0);
     70e:	60 e0       	ldi	r22, 0x00	; 0
     710:	70 e0       	ldi	r23, 0x00	; 0
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	0e 94 0f 03 	call	0x61e	; 0x61e <DC_motor>
     71a:	83 ec       	ldi	r24, 0xC3	; 195
     71c:	99 e0       	ldi	r25, 0x09	; 9
     71e:	01 97       	sbiw	r24, 0x01	; 1
     720:	f1 f7       	brne	.-4      	; 0x71e <Motor_overload_event+0x46>
     722:	00 c0       	rjmp	.+0      	; 0x724 <Motor_overload_event+0x4c>
     724:	00 00       	nop
}

void Motor_overload_event(){ // not yet finished function
	overload_val = 1;
	DC_motor(0, 0);
	while(Read_overload()){  //loop until overload end
     726:	0e 94 64 03 	call	0x6c8	; 0x6c8 <Read_overload>
     72a:	89 2b       	or	r24, r25
     72c:	21 f7       	brne	.-56     	; 0x6f6 <Motor_overload_event+0x1e>
     72e:	9f eb       	ldi	r25, 0xBF	; 191
     730:	27 e2       	ldi	r18, 0x27	; 39
     732:	89 e0       	ldi	r24, 0x09	; 9
     734:	91 50       	subi	r25, 0x01	; 1
     736:	20 40       	sbci	r18, 0x00	; 0
     738:	80 40       	sbci	r24, 0x00	; 0
     73a:	e1 f7       	brne	.-8      	; 0x734 <Motor_overload_event+0x5c>
     73c:	00 c0       	rjmp	.+0      	; 0x73e <Motor_overload_event+0x66>
     73e:	00 00       	nop
		Print_on_LCD(0, Read_temprature(), overload_val); // updating temperature even while inside the while loop.
		DC_motor(0, 0);
		_delay_ms(10);
	}
	_delay_ms(3000);  //delay at least 3 seconds
	DC_motor(motor_current_rotation_direction, motor_current_speed);
     740:	60 91 de 00 	lds	r22, 0x00DE	; 0x8000de <__data_end>
     744:	70 91 df 00 	lds	r23, 0x00DF	; 0x8000df <__data_end+0x1>
     748:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <motor_current_rotation_direction>
     74c:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <motor_current_rotation_direction+0x1>
     750:	0e 94 0f 03 	call	0x61e	; 0x61e <DC_motor>
	overload_val = 0;
     754:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <overload_val+0x1>
     758:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <overload_val>
	Print_on_LCD(resistor_val, temp_val, overload_val);
     75c:	60 91 aa 01 	lds	r22, 0x01AA	; 0x8001aa <temp_val>
     760:	70 91 ab 01 	lds	r23, 0x01AB	; 0x8001ab <temp_val+0x1>
     764:	40 e0       	ldi	r20, 0x00	; 0
     766:	50 e0       	ldi	r21, 0x00	; 0
     768:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <resistor_val>
     76c:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <resistor_val+0x1>
     770:	0e 94 55 01 	call	0x2aa	; 0x2aa <Print_on_LCD>
}
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
     778:	08 95       	ret

0000077a <__vector_18>:
	_delay_ms(1000);
	DC_motor(motor_current_rotation_direction, motor_current_speed);
	//Print_on_LCD(resistor_val, temp_val, overload_val);
}

ISR(INT2_vect){  //motor external interrupts
     77a:	1f 92       	push	r1
     77c:	0f 92       	push	r0
     77e:	0f b6       	in	r0, 0x3f	; 63
     780:	0f 92       	push	r0
     782:	11 24       	eor	r1, r1
     784:	2f 93       	push	r18
     786:	3f 93       	push	r19
     788:	4f 93       	push	r20
     78a:	5f 93       	push	r21
     78c:	6f 93       	push	r22
     78e:	7f 93       	push	r23
     790:	8f 93       	push	r24
     792:	9f 93       	push	r25
     794:	af 93       	push	r26
     796:	bf 93       	push	r27
     798:	ef 93       	push	r30
     79a:	ff 93       	push	r31
	Motor_overload_event();
     79c:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <Motor_overload_event>
}
     7a0:	ff 91       	pop	r31
     7a2:	ef 91       	pop	r30
     7a4:	bf 91       	pop	r27
     7a6:	af 91       	pop	r26
     7a8:	9f 91       	pop	r25
     7aa:	8f 91       	pop	r24
     7ac:	7f 91       	pop	r23
     7ae:	6f 91       	pop	r22
     7b0:	5f 91       	pop	r21
     7b2:	4f 91       	pop	r20
     7b4:	3f 91       	pop	r19
     7b6:	2f 91       	pop	r18
     7b8:	0f 90       	pop	r0
     7ba:	0f be       	out	0x3f, r0	; 63
     7bc:	0f 90       	pop	r0
     7be:	1f 90       	pop	r1
     7c0:	18 95       	reti

000007c2 <Motor_overTemp_event>:
	DC_motor(motor_current_rotation_direction, motor_current_speed);
	overload_val = 0;
	Print_on_LCD(resistor_val, temp_val, overload_val);
}

void Motor_overTemp_event(){ // not yet finished function
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
	int counting_time = 0;
	DC_motor(0, 0);
     7c6:	60 e0       	ldi	r22, 0x00	; 0
     7c8:	70 e0       	ldi	r23, 0x00	; 0
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	0e 94 0f 03 	call	0x61e	; 0x61e <DC_motor>
	while(Read_temprature() >= 100){  //loop until overload end - delay at least 3 seconds
     7d2:	17 c0       	rjmp	.+46     	; 0x802 <Motor_overTemp_event+0x40>
		Print_on_LCD(0, Read_temprature(), Read_overload()); // updating temperature even while inside the while loop.
     7d4:	0e 94 64 03 	call	0x6c8	; 0x6c8 <Read_overload>
     7d8:	ec 01       	movw	r28, r24
     7da:	0e 94 54 03 	call	0x6a8	; 0x6a8 <Read_temprature>
     7de:	ae 01       	movw	r20, r28
     7e0:	bc 01       	movw	r22, r24
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	0e 94 55 01 	call	0x2aa	; 0x2aa <Print_on_LCD>
		DC_motor(0, 0);
     7ea:	60 e0       	ldi	r22, 0x00	; 0
     7ec:	70 e0       	ldi	r23, 0x00	; 0
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	0e 94 0f 03 	call	0x61e	; 0x61e <DC_motor>
     7f6:	83 ec       	ldi	r24, 0xC3	; 195
     7f8:	99 e0       	ldi	r25, 0x09	; 9
     7fa:	01 97       	sbiw	r24, 0x01	; 1
     7fc:	f1 f7       	brne	.-4      	; 0x7fa <Motor_overTemp_event+0x38>
     7fe:	00 c0       	rjmp	.+0      	; 0x800 <Motor_overTemp_event+0x3e>
     800:	00 00       	nop
}

void Motor_overTemp_event(){ // not yet finished function
	int counting_time = 0;
	DC_motor(0, 0);
	while(Read_temprature() >= 100){  //loop until overload end - delay at least 3 seconds
     802:	0e 94 54 03 	call	0x6a8	; 0x6a8 <Read_temprature>
     806:	84 36       	cpi	r24, 0x64	; 100
     808:	91 05       	cpc	r25, r1
     80a:	24 f7       	brge	.-56     	; 0x7d4 <Motor_overTemp_event+0x12>
     80c:	9f e3       	ldi	r25, 0x3F	; 63
     80e:	2d e0       	ldi	r18, 0x0D	; 13
     810:	83 e0       	ldi	r24, 0x03	; 3
     812:	91 50       	subi	r25, 0x01	; 1
     814:	20 40       	sbci	r18, 0x00	; 0
     816:	80 40       	sbci	r24, 0x00	; 0
     818:	e1 f7       	brne	.-8      	; 0x812 <Motor_overTemp_event+0x50>
     81a:	00 c0       	rjmp	.+0      	; 0x81c <Motor_overTemp_event+0x5a>
     81c:	00 00       	nop
		DC_motor(0, 0);
		_delay_ms(10);
		counting_time++;
	}
	_delay_ms(1000);
	DC_motor(motor_current_rotation_direction, motor_current_speed);
     81e:	60 91 de 00 	lds	r22, 0x00DE	; 0x8000de <__data_end>
     822:	70 91 df 00 	lds	r23, 0x00DF	; 0x8000df <__data_end+0x1>
     826:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <motor_current_rotation_direction>
     82a:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <motor_current_rotation_direction+0x1>
     82e:	0e 94 0f 03 	call	0x61e	; 0x61e <DC_motor>
	//Print_on_LCD(resistor_val, temp_val, overload_val);
}
     832:	df 91       	pop	r29
     834:	cf 91       	pop	r28
     836:	08 95       	ret

00000838 <setup>:

//-------------------------------------------------------- Main Functions [Start] -----------------------------------------------------
void setup() {
	
	// initialize the display
	LCD_Init();
     838:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_Init>
     83c:	87 ea       	ldi	r24, 0xA7	; 167
     83e:	91 e6       	ldi	r25, 0x61	; 97
     840:	01 97       	sbiw	r24, 0x01	; 1
     842:	f1 f7       	brne	.-4      	; 0x840 <setup+0x8>
     844:	00 c0       	rjmp	.+0      	; 0x846 <setup+0xe>
     846:	00 00       	nop
	_delay_ms(100);
	Scroll_Text1("Developed by Bimsara Sandaruwan - EGT19517", 42); // text, number of characters in the text
     848:	6a e2       	ldi	r22, 0x2A	; 42
     84a:	70 e0       	ldi	r23, 0x00	; 0
     84c:	8f e9       	ldi	r24, 0x9F	; 159
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	0e 94 12 01 	call	0x224	; 0x224 <Scroll_Text1>
     854:	87 ea       	ldi	r24, 0xA7	; 167
     856:	91 e6       	ldi	r25, 0x61	; 97
     858:	01 97       	sbiw	r24, 0x01	; 1
     85a:	f1 f7       	brne	.-4      	; 0x858 <setup+0x20>
     85c:	00 c0       	rjmp	.+0      	; 0x85e <setup+0x26>
     85e:	00 00       	nop
	_delay_ms(100);
	LCD_Clear();
     860:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_Clear>
	Scroll_Text1("System is starting.", 19); // text, number of characters in the text
     864:	63 e1       	ldi	r22, 0x13	; 19
     866:	70 e0       	ldi	r23, 0x00	; 0
     868:	8a ec       	ldi	r24, 0xCA	; 202
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	0e 94 12 01 	call	0x224	; 0x224 <Scroll_Text1>
     870:	87 ea       	ldi	r24, 0xA7	; 167
     872:	91 e6       	ldi	r25, 0x61	; 97
     874:	01 97       	sbiw	r24, 0x01	; 1
     876:	f1 f7       	brne	.-4      	; 0x874 <setup+0x3c>
     878:	00 c0       	rjmp	.+0      	; 0x87a <setup+0x42>
     87a:	00 00       	nop
	_delay_ms(100);
	LCD_Clear();
     87c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_Clear>
	DC_motor(1, 2);  // turn on the dc motor with a speed of 0.
     880:	62 e0       	ldi	r22, 0x02	; 2
     882:	70 e0       	ldi	r23, 0x00	; 0
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	0e 94 0f 03 	call	0x61e	; 0x61e <DC_motor>
	
	//initialize the motor
	DDRB |= (1 << MOTOR_PIN1);
     88c:	87 b3       	in	r24, 0x17	; 23
     88e:	81 60       	ori	r24, 0x01	; 1
     890:	87 bb       	out	0x17, r24	; 23
	DDRB |= (1 << MOTOR_PIN2);
     892:	87 b3       	in	r24, 0x17	; 23
     894:	82 60       	ori	r24, 0x02	; 2
     896:	87 bb       	out	0x17, r24	; 23
	TCCR0 = (1<<WGM00) | (1<<COM01) | (1<<CS00); // phase control mode PWM Turn ON
     898:	81 e6       	ldi	r24, 0x61	; 97
     89a:	83 bf       	out	0x33, r24	; 51
	DDRB |= (1 << MOTOR_SPEED); //for speed controlling pin - PWM - //PB30
     89c:	87 b3       	in	r24, 0x17	; 23
     89e:	88 60       	ori	r24, 0x08	; 8
     8a0:	87 bb       	out	0x17, r24	; 23
	
	//initialize the external hardware interrupt for overload detection
	DDRB &= ~(1 << PINB2);
     8a2:	87 b3       	in	r24, 0x17	; 23
     8a4:	8b 7f       	andi	r24, 0xFB	; 251
     8a6:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1 << PINB2);
     8a8:	88 b3       	in	r24, 0x18	; 24
     8aa:	84 60       	ori	r24, 0x04	; 4
     8ac:	88 bb       	out	0x18, r24	; 24
	GICR = (1 << INT2);
     8ae:	80 e2       	ldi	r24, 0x20	; 32
     8b0:	8b bf       	out	0x3b, r24	; 59
	MCUCSR &= ~(1 << ISC2);
     8b2:	84 b7       	in	r24, 0x34	; 52
     8b4:	8f 7b       	andi	r24, 0xBF	; 191
     8b6:	84 bf       	out	0x34, r24	; 52
	sei();
     8b8:	78 94       	sei
     8ba:	08 95       	ret

000008bc <main>:
}


int main() {  // this is the main function
	setup();
     8bc:	0e 94 1c 04 	call	0x838	; 0x838 <setup>
	while(1) {
		
		resistor_val = Read_resistor();
     8c0:	0e 94 37 03 	call	0x66e	; 0x66e <Read_resistor>
     8c4:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <resistor_val+0x1>
     8c8:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <resistor_val>
		temp_val = Read_temprature();
     8cc:	0e 94 54 03 	call	0x6a8	; 0x6a8 <Read_temprature>
     8d0:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <temp_val+0x1>
     8d4:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <temp_val>
		
		if(temp_val >= 100){
     8d8:	84 36       	cpi	r24, 0x64	; 100
     8da:	91 05       	cpc	r25, r1
     8dc:	14 f0       	brlt	.+4      	; 0x8e2 <main+0x26>
			Motor_overTemp_event();
     8de:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <Motor_overTemp_event>
		}
		
		int speed_motor = resistor_val * 2.55;
     8e2:	60 91 ca 01 	lds	r22, 0x01CA	; 0x8001ca <resistor_val>
     8e6:	70 91 cb 01 	lds	r23, 0x01CB	; 0x8001cb <resistor_val+0x1>
     8ea:	07 2e       	mov	r0, r23
     8ec:	00 0c       	add	r0, r0
     8ee:	88 0b       	sbc	r24, r24
     8f0:	99 0b       	sbc	r25, r25
     8f2:	0e 94 40 05 	call	0xa80	; 0xa80 <__floatsisf>
     8f6:	23 e3       	ldi	r18, 0x33	; 51
     8f8:	33 e3       	ldi	r19, 0x33	; 51
     8fa:	43 e2       	ldi	r20, 0x23	; 35
     8fc:	50 e4       	ldi	r21, 0x40	; 64
     8fe:	0e 94 cc 05 	call	0xb98	; 0xb98 <__mulsf3>
     902:	0e 94 08 05 	call	0xa10	; 0xa10 <__fixsfsi>
		DC_motor(1, speed_motor);
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	0e 94 0f 03 	call	0x61e	; 0x61e <DC_motor>
		Print_on_LCD(resistor_val, temp_val, overload_val); //updating lcd display only if some data has changed.
     90e:	40 91 cc 01 	lds	r20, 0x01CC	; 0x8001cc <overload_val>
     912:	50 91 cd 01 	lds	r21, 0x01CD	; 0x8001cd <overload_val+0x1>
     916:	60 91 aa 01 	lds	r22, 0x01AA	; 0x8001aa <temp_val>
     91a:	70 91 ab 01 	lds	r23, 0x01AB	; 0x8001ab <temp_val+0x1>
     91e:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <resistor_val>
     922:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <resistor_val+0x1>
     926:	0e 94 55 01 	call	0x2aa	; 0x2aa <Print_on_LCD>
	}
     92a:	ca cf       	rjmp	.-108    	; 0x8c0 <main+0x4>

0000092c <__divsf3>:
     92c:	0e 94 aa 04 	call	0x954	; 0x954 <__divsf3x>
     930:	0c 94 92 05 	jmp	0xb24	; 0xb24 <__fp_round>
     934:	0e 94 8b 05 	call	0xb16	; 0xb16 <__fp_pscB>
     938:	58 f0       	brcs	.+22     	; 0x950 <__divsf3+0x24>
     93a:	0e 94 84 05 	call	0xb08	; 0xb08 <__fp_pscA>
     93e:	40 f0       	brcs	.+16     	; 0x950 <__divsf3+0x24>
     940:	29 f4       	brne	.+10     	; 0x94c <__divsf3+0x20>
     942:	5f 3f       	cpi	r21, 0xFF	; 255
     944:	29 f0       	breq	.+10     	; 0x950 <__divsf3+0x24>
     946:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__fp_inf>
     94a:	51 11       	cpse	r21, r1
     94c:	0c 94 c6 05 	jmp	0xb8c	; 0xb8c <__fp_szero>
     950:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__fp_nan>

00000954 <__divsf3x>:
     954:	0e 94 a3 05 	call	0xb46	; 0xb46 <__fp_split3>
     958:	68 f3       	brcs	.-38     	; 0x934 <__divsf3+0x8>

0000095a <__divsf3_pse>:
     95a:	99 23       	and	r25, r25
     95c:	b1 f3       	breq	.-20     	; 0x94a <__divsf3+0x1e>
     95e:	55 23       	and	r21, r21
     960:	91 f3       	breq	.-28     	; 0x946 <__divsf3+0x1a>
     962:	95 1b       	sub	r25, r21
     964:	55 0b       	sbc	r21, r21
     966:	bb 27       	eor	r27, r27
     968:	aa 27       	eor	r26, r26
     96a:	62 17       	cp	r22, r18
     96c:	73 07       	cpc	r23, r19
     96e:	84 07       	cpc	r24, r20
     970:	38 f0       	brcs	.+14     	; 0x980 <__divsf3_pse+0x26>
     972:	9f 5f       	subi	r25, 0xFF	; 255
     974:	5f 4f       	sbci	r21, 0xFF	; 255
     976:	22 0f       	add	r18, r18
     978:	33 1f       	adc	r19, r19
     97a:	44 1f       	adc	r20, r20
     97c:	aa 1f       	adc	r26, r26
     97e:	a9 f3       	breq	.-22     	; 0x96a <__divsf3_pse+0x10>
     980:	35 d0       	rcall	.+106    	; 0x9ec <__divsf3_pse+0x92>
     982:	0e 2e       	mov	r0, r30
     984:	3a f0       	brmi	.+14     	; 0x994 <__divsf3_pse+0x3a>
     986:	e0 e8       	ldi	r30, 0x80	; 128
     988:	32 d0       	rcall	.+100    	; 0x9ee <__divsf3_pse+0x94>
     98a:	91 50       	subi	r25, 0x01	; 1
     98c:	50 40       	sbci	r21, 0x00	; 0
     98e:	e6 95       	lsr	r30
     990:	00 1c       	adc	r0, r0
     992:	ca f7       	brpl	.-14     	; 0x986 <__divsf3_pse+0x2c>
     994:	2b d0       	rcall	.+86     	; 0x9ec <__divsf3_pse+0x92>
     996:	fe 2f       	mov	r31, r30
     998:	29 d0       	rcall	.+82     	; 0x9ec <__divsf3_pse+0x92>
     99a:	66 0f       	add	r22, r22
     99c:	77 1f       	adc	r23, r23
     99e:	88 1f       	adc	r24, r24
     9a0:	bb 1f       	adc	r27, r27
     9a2:	26 17       	cp	r18, r22
     9a4:	37 07       	cpc	r19, r23
     9a6:	48 07       	cpc	r20, r24
     9a8:	ab 07       	cpc	r26, r27
     9aa:	b0 e8       	ldi	r27, 0x80	; 128
     9ac:	09 f0       	breq	.+2      	; 0x9b0 <__divsf3_pse+0x56>
     9ae:	bb 0b       	sbc	r27, r27
     9b0:	80 2d       	mov	r24, r0
     9b2:	bf 01       	movw	r22, r30
     9b4:	ff 27       	eor	r31, r31
     9b6:	93 58       	subi	r25, 0x83	; 131
     9b8:	5f 4f       	sbci	r21, 0xFF	; 255
     9ba:	3a f0       	brmi	.+14     	; 0x9ca <__divsf3_pse+0x70>
     9bc:	9e 3f       	cpi	r25, 0xFE	; 254
     9be:	51 05       	cpc	r21, r1
     9c0:	78 f0       	brcs	.+30     	; 0x9e0 <__divsf3_pse+0x86>
     9c2:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__fp_inf>
     9c6:	0c 94 c6 05 	jmp	0xb8c	; 0xb8c <__fp_szero>
     9ca:	5f 3f       	cpi	r21, 0xFF	; 255
     9cc:	e4 f3       	brlt	.-8      	; 0x9c6 <__divsf3_pse+0x6c>
     9ce:	98 3e       	cpi	r25, 0xE8	; 232
     9d0:	d4 f3       	brlt	.-12     	; 0x9c6 <__divsf3_pse+0x6c>
     9d2:	86 95       	lsr	r24
     9d4:	77 95       	ror	r23
     9d6:	67 95       	ror	r22
     9d8:	b7 95       	ror	r27
     9da:	f7 95       	ror	r31
     9dc:	9f 5f       	subi	r25, 0xFF	; 255
     9de:	c9 f7       	brne	.-14     	; 0x9d2 <__divsf3_pse+0x78>
     9e0:	88 0f       	add	r24, r24
     9e2:	91 1d       	adc	r25, r1
     9e4:	96 95       	lsr	r25
     9e6:	87 95       	ror	r24
     9e8:	97 f9       	bld	r25, 7
     9ea:	08 95       	ret
     9ec:	e1 e0       	ldi	r30, 0x01	; 1
     9ee:	66 0f       	add	r22, r22
     9f0:	77 1f       	adc	r23, r23
     9f2:	88 1f       	adc	r24, r24
     9f4:	bb 1f       	adc	r27, r27
     9f6:	62 17       	cp	r22, r18
     9f8:	73 07       	cpc	r23, r19
     9fa:	84 07       	cpc	r24, r20
     9fc:	ba 07       	cpc	r27, r26
     9fe:	20 f0       	brcs	.+8      	; 0xa08 <__divsf3_pse+0xae>
     a00:	62 1b       	sub	r22, r18
     a02:	73 0b       	sbc	r23, r19
     a04:	84 0b       	sbc	r24, r20
     a06:	ba 0b       	sbc	r27, r26
     a08:	ee 1f       	adc	r30, r30
     a0a:	88 f7       	brcc	.-30     	; 0x9ee <__divsf3_pse+0x94>
     a0c:	e0 95       	com	r30
     a0e:	08 95       	ret

00000a10 <__fixsfsi>:
     a10:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__fixunssfsi>
     a14:	68 94       	set
     a16:	b1 11       	cpse	r27, r1
     a18:	0c 94 c6 05 	jmp	0xb8c	; 0xb8c <__fp_szero>
     a1c:	08 95       	ret

00000a1e <__fixunssfsi>:
     a1e:	0e 94 ab 05 	call	0xb56	; 0xb56 <__fp_splitA>
     a22:	88 f0       	brcs	.+34     	; 0xa46 <__fixunssfsi+0x28>
     a24:	9f 57       	subi	r25, 0x7F	; 127
     a26:	98 f0       	brcs	.+38     	; 0xa4e <__fixunssfsi+0x30>
     a28:	b9 2f       	mov	r27, r25
     a2a:	99 27       	eor	r25, r25
     a2c:	b7 51       	subi	r27, 0x17	; 23
     a2e:	b0 f0       	brcs	.+44     	; 0xa5c <__fixunssfsi+0x3e>
     a30:	e1 f0       	breq	.+56     	; 0xa6a <__fixunssfsi+0x4c>
     a32:	66 0f       	add	r22, r22
     a34:	77 1f       	adc	r23, r23
     a36:	88 1f       	adc	r24, r24
     a38:	99 1f       	adc	r25, r25
     a3a:	1a f0       	brmi	.+6      	; 0xa42 <__fixunssfsi+0x24>
     a3c:	ba 95       	dec	r27
     a3e:	c9 f7       	brne	.-14     	; 0xa32 <__fixunssfsi+0x14>
     a40:	14 c0       	rjmp	.+40     	; 0xa6a <__fixunssfsi+0x4c>
     a42:	b1 30       	cpi	r27, 0x01	; 1
     a44:	91 f0       	breq	.+36     	; 0xa6a <__fixunssfsi+0x4c>
     a46:	0e 94 c5 05 	call	0xb8a	; 0xb8a <__fp_zero>
     a4a:	b1 e0       	ldi	r27, 0x01	; 1
     a4c:	08 95       	ret
     a4e:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__fp_zero>
     a52:	67 2f       	mov	r22, r23
     a54:	78 2f       	mov	r23, r24
     a56:	88 27       	eor	r24, r24
     a58:	b8 5f       	subi	r27, 0xF8	; 248
     a5a:	39 f0       	breq	.+14     	; 0xa6a <__fixunssfsi+0x4c>
     a5c:	b9 3f       	cpi	r27, 0xF9	; 249
     a5e:	cc f3       	brlt	.-14     	; 0xa52 <__fixunssfsi+0x34>
     a60:	86 95       	lsr	r24
     a62:	77 95       	ror	r23
     a64:	67 95       	ror	r22
     a66:	b3 95       	inc	r27
     a68:	d9 f7       	brne	.-10     	; 0xa60 <__fixunssfsi+0x42>
     a6a:	3e f4       	brtc	.+14     	; 0xa7a <__fixunssfsi+0x5c>
     a6c:	90 95       	com	r25
     a6e:	80 95       	com	r24
     a70:	70 95       	com	r23
     a72:	61 95       	neg	r22
     a74:	7f 4f       	sbci	r23, 0xFF	; 255
     a76:	8f 4f       	sbci	r24, 0xFF	; 255
     a78:	9f 4f       	sbci	r25, 0xFF	; 255
     a7a:	08 95       	ret

00000a7c <__floatunsisf>:
     a7c:	e8 94       	clt
     a7e:	09 c0       	rjmp	.+18     	; 0xa92 <__floatsisf+0x12>

00000a80 <__floatsisf>:
     a80:	97 fb       	bst	r25, 7
     a82:	3e f4       	brtc	.+14     	; 0xa92 <__floatsisf+0x12>
     a84:	90 95       	com	r25
     a86:	80 95       	com	r24
     a88:	70 95       	com	r23
     a8a:	61 95       	neg	r22
     a8c:	7f 4f       	sbci	r23, 0xFF	; 255
     a8e:	8f 4f       	sbci	r24, 0xFF	; 255
     a90:	9f 4f       	sbci	r25, 0xFF	; 255
     a92:	99 23       	and	r25, r25
     a94:	a9 f0       	breq	.+42     	; 0xac0 <__floatsisf+0x40>
     a96:	f9 2f       	mov	r31, r25
     a98:	96 e9       	ldi	r25, 0x96	; 150
     a9a:	bb 27       	eor	r27, r27
     a9c:	93 95       	inc	r25
     a9e:	f6 95       	lsr	r31
     aa0:	87 95       	ror	r24
     aa2:	77 95       	ror	r23
     aa4:	67 95       	ror	r22
     aa6:	b7 95       	ror	r27
     aa8:	f1 11       	cpse	r31, r1
     aaa:	f8 cf       	rjmp	.-16     	; 0xa9c <__floatsisf+0x1c>
     aac:	fa f4       	brpl	.+62     	; 0xaec <__floatsisf+0x6c>
     aae:	bb 0f       	add	r27, r27
     ab0:	11 f4       	brne	.+4      	; 0xab6 <__floatsisf+0x36>
     ab2:	60 ff       	sbrs	r22, 0
     ab4:	1b c0       	rjmp	.+54     	; 0xaec <__floatsisf+0x6c>
     ab6:	6f 5f       	subi	r22, 0xFF	; 255
     ab8:	7f 4f       	sbci	r23, 0xFF	; 255
     aba:	8f 4f       	sbci	r24, 0xFF	; 255
     abc:	9f 4f       	sbci	r25, 0xFF	; 255
     abe:	16 c0       	rjmp	.+44     	; 0xaec <__floatsisf+0x6c>
     ac0:	88 23       	and	r24, r24
     ac2:	11 f0       	breq	.+4      	; 0xac8 <__floatsisf+0x48>
     ac4:	96 e9       	ldi	r25, 0x96	; 150
     ac6:	11 c0       	rjmp	.+34     	; 0xaea <__floatsisf+0x6a>
     ac8:	77 23       	and	r23, r23
     aca:	21 f0       	breq	.+8      	; 0xad4 <__floatsisf+0x54>
     acc:	9e e8       	ldi	r25, 0x8E	; 142
     ace:	87 2f       	mov	r24, r23
     ad0:	76 2f       	mov	r23, r22
     ad2:	05 c0       	rjmp	.+10     	; 0xade <__floatsisf+0x5e>
     ad4:	66 23       	and	r22, r22
     ad6:	71 f0       	breq	.+28     	; 0xaf4 <__floatsisf+0x74>
     ad8:	96 e8       	ldi	r25, 0x86	; 134
     ada:	86 2f       	mov	r24, r22
     adc:	70 e0       	ldi	r23, 0x00	; 0
     ade:	60 e0       	ldi	r22, 0x00	; 0
     ae0:	2a f0       	brmi	.+10     	; 0xaec <__floatsisf+0x6c>
     ae2:	9a 95       	dec	r25
     ae4:	66 0f       	add	r22, r22
     ae6:	77 1f       	adc	r23, r23
     ae8:	88 1f       	adc	r24, r24
     aea:	da f7       	brpl	.-10     	; 0xae2 <__floatsisf+0x62>
     aec:	88 0f       	add	r24, r24
     aee:	96 95       	lsr	r25
     af0:	87 95       	ror	r24
     af2:	97 f9       	bld	r25, 7
     af4:	08 95       	ret

00000af6 <__fp_inf>:
     af6:	97 f9       	bld	r25, 7
     af8:	9f 67       	ori	r25, 0x7F	; 127
     afa:	80 e8       	ldi	r24, 0x80	; 128
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	60 e0       	ldi	r22, 0x00	; 0
     b00:	08 95       	ret

00000b02 <__fp_nan>:
     b02:	9f ef       	ldi	r25, 0xFF	; 255
     b04:	80 ec       	ldi	r24, 0xC0	; 192
     b06:	08 95       	ret

00000b08 <__fp_pscA>:
     b08:	00 24       	eor	r0, r0
     b0a:	0a 94       	dec	r0
     b0c:	16 16       	cp	r1, r22
     b0e:	17 06       	cpc	r1, r23
     b10:	18 06       	cpc	r1, r24
     b12:	09 06       	cpc	r0, r25
     b14:	08 95       	ret

00000b16 <__fp_pscB>:
     b16:	00 24       	eor	r0, r0
     b18:	0a 94       	dec	r0
     b1a:	12 16       	cp	r1, r18
     b1c:	13 06       	cpc	r1, r19
     b1e:	14 06       	cpc	r1, r20
     b20:	05 06       	cpc	r0, r21
     b22:	08 95       	ret

00000b24 <__fp_round>:
     b24:	09 2e       	mov	r0, r25
     b26:	03 94       	inc	r0
     b28:	00 0c       	add	r0, r0
     b2a:	11 f4       	brne	.+4      	; 0xb30 <__fp_round+0xc>
     b2c:	88 23       	and	r24, r24
     b2e:	52 f0       	brmi	.+20     	; 0xb44 <__fp_round+0x20>
     b30:	bb 0f       	add	r27, r27
     b32:	40 f4       	brcc	.+16     	; 0xb44 <__fp_round+0x20>
     b34:	bf 2b       	or	r27, r31
     b36:	11 f4       	brne	.+4      	; 0xb3c <__fp_round+0x18>
     b38:	60 ff       	sbrs	r22, 0
     b3a:	04 c0       	rjmp	.+8      	; 0xb44 <__fp_round+0x20>
     b3c:	6f 5f       	subi	r22, 0xFF	; 255
     b3e:	7f 4f       	sbci	r23, 0xFF	; 255
     b40:	8f 4f       	sbci	r24, 0xFF	; 255
     b42:	9f 4f       	sbci	r25, 0xFF	; 255
     b44:	08 95       	ret

00000b46 <__fp_split3>:
     b46:	57 fd       	sbrc	r21, 7
     b48:	90 58       	subi	r25, 0x80	; 128
     b4a:	44 0f       	add	r20, r20
     b4c:	55 1f       	adc	r21, r21
     b4e:	59 f0       	breq	.+22     	; 0xb66 <__fp_splitA+0x10>
     b50:	5f 3f       	cpi	r21, 0xFF	; 255
     b52:	71 f0       	breq	.+28     	; 0xb70 <__fp_splitA+0x1a>
     b54:	47 95       	ror	r20

00000b56 <__fp_splitA>:
     b56:	88 0f       	add	r24, r24
     b58:	97 fb       	bst	r25, 7
     b5a:	99 1f       	adc	r25, r25
     b5c:	61 f0       	breq	.+24     	; 0xb76 <__fp_splitA+0x20>
     b5e:	9f 3f       	cpi	r25, 0xFF	; 255
     b60:	79 f0       	breq	.+30     	; 0xb80 <__fp_splitA+0x2a>
     b62:	87 95       	ror	r24
     b64:	08 95       	ret
     b66:	12 16       	cp	r1, r18
     b68:	13 06       	cpc	r1, r19
     b6a:	14 06       	cpc	r1, r20
     b6c:	55 1f       	adc	r21, r21
     b6e:	f2 cf       	rjmp	.-28     	; 0xb54 <__fp_split3+0xe>
     b70:	46 95       	lsr	r20
     b72:	f1 df       	rcall	.-30     	; 0xb56 <__fp_splitA>
     b74:	08 c0       	rjmp	.+16     	; 0xb86 <__fp_splitA+0x30>
     b76:	16 16       	cp	r1, r22
     b78:	17 06       	cpc	r1, r23
     b7a:	18 06       	cpc	r1, r24
     b7c:	99 1f       	adc	r25, r25
     b7e:	f1 cf       	rjmp	.-30     	; 0xb62 <__fp_splitA+0xc>
     b80:	86 95       	lsr	r24
     b82:	71 05       	cpc	r23, r1
     b84:	61 05       	cpc	r22, r1
     b86:	08 94       	sec
     b88:	08 95       	ret

00000b8a <__fp_zero>:
     b8a:	e8 94       	clt

00000b8c <__fp_szero>:
     b8c:	bb 27       	eor	r27, r27
     b8e:	66 27       	eor	r22, r22
     b90:	77 27       	eor	r23, r23
     b92:	cb 01       	movw	r24, r22
     b94:	97 f9       	bld	r25, 7
     b96:	08 95       	ret

00000b98 <__mulsf3>:
     b98:	0e 94 df 05 	call	0xbbe	; 0xbbe <__mulsf3x>
     b9c:	0c 94 92 05 	jmp	0xb24	; 0xb24 <__fp_round>
     ba0:	0e 94 84 05 	call	0xb08	; 0xb08 <__fp_pscA>
     ba4:	38 f0       	brcs	.+14     	; 0xbb4 <__mulsf3+0x1c>
     ba6:	0e 94 8b 05 	call	0xb16	; 0xb16 <__fp_pscB>
     baa:	20 f0       	brcs	.+8      	; 0xbb4 <__mulsf3+0x1c>
     bac:	95 23       	and	r25, r21
     bae:	11 f0       	breq	.+4      	; 0xbb4 <__mulsf3+0x1c>
     bb0:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__fp_inf>
     bb4:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__fp_nan>
     bb8:	11 24       	eor	r1, r1
     bba:	0c 94 c6 05 	jmp	0xb8c	; 0xb8c <__fp_szero>

00000bbe <__mulsf3x>:
     bbe:	0e 94 a3 05 	call	0xb46	; 0xb46 <__fp_split3>
     bc2:	70 f3       	brcs	.-36     	; 0xba0 <__mulsf3+0x8>

00000bc4 <__mulsf3_pse>:
     bc4:	95 9f       	mul	r25, r21
     bc6:	c1 f3       	breq	.-16     	; 0xbb8 <__mulsf3+0x20>
     bc8:	95 0f       	add	r25, r21
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	55 1f       	adc	r21, r21
     bce:	62 9f       	mul	r22, r18
     bd0:	f0 01       	movw	r30, r0
     bd2:	72 9f       	mul	r23, r18
     bd4:	bb 27       	eor	r27, r27
     bd6:	f0 0d       	add	r31, r0
     bd8:	b1 1d       	adc	r27, r1
     bda:	63 9f       	mul	r22, r19
     bdc:	aa 27       	eor	r26, r26
     bde:	f0 0d       	add	r31, r0
     be0:	b1 1d       	adc	r27, r1
     be2:	aa 1f       	adc	r26, r26
     be4:	64 9f       	mul	r22, r20
     be6:	66 27       	eor	r22, r22
     be8:	b0 0d       	add	r27, r0
     bea:	a1 1d       	adc	r26, r1
     bec:	66 1f       	adc	r22, r22
     bee:	82 9f       	mul	r24, r18
     bf0:	22 27       	eor	r18, r18
     bf2:	b0 0d       	add	r27, r0
     bf4:	a1 1d       	adc	r26, r1
     bf6:	62 1f       	adc	r22, r18
     bf8:	73 9f       	mul	r23, r19
     bfa:	b0 0d       	add	r27, r0
     bfc:	a1 1d       	adc	r26, r1
     bfe:	62 1f       	adc	r22, r18
     c00:	83 9f       	mul	r24, r19
     c02:	a0 0d       	add	r26, r0
     c04:	61 1d       	adc	r22, r1
     c06:	22 1f       	adc	r18, r18
     c08:	74 9f       	mul	r23, r20
     c0a:	33 27       	eor	r19, r19
     c0c:	a0 0d       	add	r26, r0
     c0e:	61 1d       	adc	r22, r1
     c10:	23 1f       	adc	r18, r19
     c12:	84 9f       	mul	r24, r20
     c14:	60 0d       	add	r22, r0
     c16:	21 1d       	adc	r18, r1
     c18:	82 2f       	mov	r24, r18
     c1a:	76 2f       	mov	r23, r22
     c1c:	6a 2f       	mov	r22, r26
     c1e:	11 24       	eor	r1, r1
     c20:	9f 57       	subi	r25, 0x7F	; 127
     c22:	50 40       	sbci	r21, 0x00	; 0
     c24:	9a f0       	brmi	.+38     	; 0xc4c <__mulsf3_pse+0x88>
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__mulsf3_pse+0xa0>
     c28:	88 23       	and	r24, r24
     c2a:	4a f0       	brmi	.+18     	; 0xc3e <__mulsf3_pse+0x7a>
     c2c:	ee 0f       	add	r30, r30
     c2e:	ff 1f       	adc	r31, r31
     c30:	bb 1f       	adc	r27, r27
     c32:	66 1f       	adc	r22, r22
     c34:	77 1f       	adc	r23, r23
     c36:	88 1f       	adc	r24, r24
     c38:	91 50       	subi	r25, 0x01	; 1
     c3a:	50 40       	sbci	r21, 0x00	; 0
     c3c:	a9 f7       	brne	.-22     	; 0xc28 <__mulsf3_pse+0x64>
     c3e:	9e 3f       	cpi	r25, 0xFE	; 254
     c40:	51 05       	cpc	r21, r1
     c42:	80 f0       	brcs	.+32     	; 0xc64 <__mulsf3_pse+0xa0>
     c44:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__fp_inf>
     c48:	0c 94 c6 05 	jmp	0xb8c	; 0xb8c <__fp_szero>
     c4c:	5f 3f       	cpi	r21, 0xFF	; 255
     c4e:	e4 f3       	brlt	.-8      	; 0xc48 <__mulsf3_pse+0x84>
     c50:	98 3e       	cpi	r25, 0xE8	; 232
     c52:	d4 f3       	brlt	.-12     	; 0xc48 <__mulsf3_pse+0x84>
     c54:	86 95       	lsr	r24
     c56:	77 95       	ror	r23
     c58:	67 95       	ror	r22
     c5a:	b7 95       	ror	r27
     c5c:	f7 95       	ror	r31
     c5e:	e7 95       	ror	r30
     c60:	9f 5f       	subi	r25, 0xFF	; 255
     c62:	c1 f7       	brne	.-16     	; 0xc54 <__mulsf3_pse+0x90>
     c64:	fe 2b       	or	r31, r30
     c66:	88 0f       	add	r24, r24
     c68:	91 1d       	adc	r25, r1
     c6a:	96 95       	lsr	r25
     c6c:	87 95       	ror	r24
     c6e:	97 f9       	bld	r25, 7
     c70:	08 95       	ret

00000c72 <sprintf>:
     c72:	ae e0       	ldi	r26, 0x0E	; 14
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	ef e3       	ldi	r30, 0x3F	; 63
     c78:	f6 e0       	ldi	r31, 0x06	; 6
     c7a:	0c 94 fa 08 	jmp	0x11f4	; 0x11f4 <__prologue_saves__+0x1c>
     c7e:	0d 89       	ldd	r16, Y+21	; 0x15
     c80:	1e 89       	ldd	r17, Y+22	; 0x16
     c82:	86 e0       	ldi	r24, 0x06	; 6
     c84:	8c 83       	std	Y+4, r24	; 0x04
     c86:	1a 83       	std	Y+2, r17	; 0x02
     c88:	09 83       	std	Y+1, r16	; 0x01
     c8a:	8f ef       	ldi	r24, 0xFF	; 255
     c8c:	9f e7       	ldi	r25, 0x7F	; 127
     c8e:	9e 83       	std	Y+6, r25	; 0x06
     c90:	8d 83       	std	Y+5, r24	; 0x05
     c92:	ae 01       	movw	r20, r28
     c94:	47 5e       	subi	r20, 0xE7	; 231
     c96:	5f 4f       	sbci	r21, 0xFF	; 255
     c98:	6f 89       	ldd	r22, Y+23	; 0x17
     c9a:	78 8d       	ldd	r23, Y+24	; 0x18
     c9c:	ce 01       	movw	r24, r28
     c9e:	01 96       	adiw	r24, 0x01	; 1
     ca0:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <vfprintf>
     ca4:	ef 81       	ldd	r30, Y+7	; 0x07
     ca6:	f8 85       	ldd	r31, Y+8	; 0x08
     ca8:	e0 0f       	add	r30, r16
     caa:	f1 1f       	adc	r31, r17
     cac:	10 82       	st	Z, r1
     cae:	2e 96       	adiw	r28, 0x0e	; 14
     cb0:	e4 e0       	ldi	r30, 0x04	; 4
     cb2:	0c 94 16 09 	jmp	0x122c	; 0x122c <__epilogue_restores__+0x1c>

00000cb6 <vfprintf>:
     cb6:	ab e0       	ldi	r26, 0x0B	; 11
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e1 e6       	ldi	r30, 0x61	; 97
     cbc:	f6 e0       	ldi	r31, 0x06	; 6
     cbe:	0c 94 ec 08 	jmp	0x11d8	; 0x11d8 <__prologue_saves__>
     cc2:	6c 01       	movw	r12, r24
     cc4:	7b 01       	movw	r14, r22
     cc6:	8a 01       	movw	r16, r20
     cc8:	fc 01       	movw	r30, r24
     cca:	17 82       	std	Z+7, r1	; 0x07
     ccc:	16 82       	std	Z+6, r1	; 0x06
     cce:	83 81       	ldd	r24, Z+3	; 0x03
     cd0:	81 ff       	sbrs	r24, 1
     cd2:	cc c1       	rjmp	.+920    	; 0x106c <vfprintf+0x3b6>
     cd4:	ce 01       	movw	r24, r28
     cd6:	01 96       	adiw	r24, 0x01	; 1
     cd8:	3c 01       	movw	r6, r24
     cda:	f6 01       	movw	r30, r12
     cdc:	93 81       	ldd	r25, Z+3	; 0x03
     cde:	f7 01       	movw	r30, r14
     ce0:	93 fd       	sbrc	r25, 3
     ce2:	85 91       	lpm	r24, Z+
     ce4:	93 ff       	sbrs	r25, 3
     ce6:	81 91       	ld	r24, Z+
     ce8:	7f 01       	movw	r14, r30
     cea:	88 23       	and	r24, r24
     cec:	09 f4       	brne	.+2      	; 0xcf0 <vfprintf+0x3a>
     cee:	ba c1       	rjmp	.+884    	; 0x1064 <vfprintf+0x3ae>
     cf0:	85 32       	cpi	r24, 0x25	; 37
     cf2:	39 f4       	brne	.+14     	; 0xd02 <vfprintf+0x4c>
     cf4:	93 fd       	sbrc	r25, 3
     cf6:	85 91       	lpm	r24, Z+
     cf8:	93 ff       	sbrs	r25, 3
     cfa:	81 91       	ld	r24, Z+
     cfc:	7f 01       	movw	r14, r30
     cfe:	85 32       	cpi	r24, 0x25	; 37
     d00:	29 f4       	brne	.+10     	; 0xd0c <vfprintf+0x56>
     d02:	b6 01       	movw	r22, r12
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	0e 94 52 08 	call	0x10a4	; 0x10a4 <fputc>
     d0a:	e7 cf       	rjmp	.-50     	; 0xcda <vfprintf+0x24>
     d0c:	91 2c       	mov	r9, r1
     d0e:	21 2c       	mov	r2, r1
     d10:	31 2c       	mov	r3, r1
     d12:	ff e1       	ldi	r31, 0x1F	; 31
     d14:	f3 15       	cp	r31, r3
     d16:	d8 f0       	brcs	.+54     	; 0xd4e <vfprintf+0x98>
     d18:	8b 32       	cpi	r24, 0x2B	; 43
     d1a:	79 f0       	breq	.+30     	; 0xd3a <vfprintf+0x84>
     d1c:	38 f4       	brcc	.+14     	; 0xd2c <vfprintf+0x76>
     d1e:	80 32       	cpi	r24, 0x20	; 32
     d20:	79 f0       	breq	.+30     	; 0xd40 <vfprintf+0x8a>
     d22:	83 32       	cpi	r24, 0x23	; 35
     d24:	a1 f4       	brne	.+40     	; 0xd4e <vfprintf+0x98>
     d26:	23 2d       	mov	r18, r3
     d28:	20 61       	ori	r18, 0x10	; 16
     d2a:	1d c0       	rjmp	.+58     	; 0xd66 <vfprintf+0xb0>
     d2c:	8d 32       	cpi	r24, 0x2D	; 45
     d2e:	61 f0       	breq	.+24     	; 0xd48 <vfprintf+0x92>
     d30:	80 33       	cpi	r24, 0x30	; 48
     d32:	69 f4       	brne	.+26     	; 0xd4e <vfprintf+0x98>
     d34:	23 2d       	mov	r18, r3
     d36:	21 60       	ori	r18, 0x01	; 1
     d38:	16 c0       	rjmp	.+44     	; 0xd66 <vfprintf+0xb0>
     d3a:	83 2d       	mov	r24, r3
     d3c:	82 60       	ori	r24, 0x02	; 2
     d3e:	38 2e       	mov	r3, r24
     d40:	e3 2d       	mov	r30, r3
     d42:	e4 60       	ori	r30, 0x04	; 4
     d44:	3e 2e       	mov	r3, r30
     d46:	2a c0       	rjmp	.+84     	; 0xd9c <vfprintf+0xe6>
     d48:	f3 2d       	mov	r31, r3
     d4a:	f8 60       	ori	r31, 0x08	; 8
     d4c:	1d c0       	rjmp	.+58     	; 0xd88 <vfprintf+0xd2>
     d4e:	37 fc       	sbrc	r3, 7
     d50:	2d c0       	rjmp	.+90     	; 0xdac <vfprintf+0xf6>
     d52:	20 ed       	ldi	r18, 0xD0	; 208
     d54:	28 0f       	add	r18, r24
     d56:	2a 30       	cpi	r18, 0x0A	; 10
     d58:	40 f0       	brcs	.+16     	; 0xd6a <vfprintf+0xb4>
     d5a:	8e 32       	cpi	r24, 0x2E	; 46
     d5c:	b9 f4       	brne	.+46     	; 0xd8c <vfprintf+0xd6>
     d5e:	36 fc       	sbrc	r3, 6
     d60:	81 c1       	rjmp	.+770    	; 0x1064 <vfprintf+0x3ae>
     d62:	23 2d       	mov	r18, r3
     d64:	20 64       	ori	r18, 0x40	; 64
     d66:	32 2e       	mov	r3, r18
     d68:	19 c0       	rjmp	.+50     	; 0xd9c <vfprintf+0xe6>
     d6a:	36 fe       	sbrs	r3, 6
     d6c:	06 c0       	rjmp	.+12     	; 0xd7a <vfprintf+0xc4>
     d6e:	8a e0       	ldi	r24, 0x0A	; 10
     d70:	98 9e       	mul	r9, r24
     d72:	20 0d       	add	r18, r0
     d74:	11 24       	eor	r1, r1
     d76:	92 2e       	mov	r9, r18
     d78:	11 c0       	rjmp	.+34     	; 0xd9c <vfprintf+0xe6>
     d7a:	ea e0       	ldi	r30, 0x0A	; 10
     d7c:	2e 9e       	mul	r2, r30
     d7e:	20 0d       	add	r18, r0
     d80:	11 24       	eor	r1, r1
     d82:	22 2e       	mov	r2, r18
     d84:	f3 2d       	mov	r31, r3
     d86:	f0 62       	ori	r31, 0x20	; 32
     d88:	3f 2e       	mov	r3, r31
     d8a:	08 c0       	rjmp	.+16     	; 0xd9c <vfprintf+0xe6>
     d8c:	8c 36       	cpi	r24, 0x6C	; 108
     d8e:	21 f4       	brne	.+8      	; 0xd98 <vfprintf+0xe2>
     d90:	83 2d       	mov	r24, r3
     d92:	80 68       	ori	r24, 0x80	; 128
     d94:	38 2e       	mov	r3, r24
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <vfprintf+0xe6>
     d98:	88 36       	cpi	r24, 0x68	; 104
     d9a:	41 f4       	brne	.+16     	; 0xdac <vfprintf+0xf6>
     d9c:	f7 01       	movw	r30, r14
     d9e:	93 fd       	sbrc	r25, 3
     da0:	85 91       	lpm	r24, Z+
     da2:	93 ff       	sbrs	r25, 3
     da4:	81 91       	ld	r24, Z+
     da6:	7f 01       	movw	r14, r30
     da8:	81 11       	cpse	r24, r1
     daa:	b3 cf       	rjmp	.-154    	; 0xd12 <vfprintf+0x5c>
     dac:	98 2f       	mov	r25, r24
     dae:	9f 7d       	andi	r25, 0xDF	; 223
     db0:	95 54       	subi	r25, 0x45	; 69
     db2:	93 30       	cpi	r25, 0x03	; 3
     db4:	28 f4       	brcc	.+10     	; 0xdc0 <vfprintf+0x10a>
     db6:	0c 5f       	subi	r16, 0xFC	; 252
     db8:	1f 4f       	sbci	r17, 0xFF	; 255
     dba:	9f e3       	ldi	r25, 0x3F	; 63
     dbc:	99 83       	std	Y+1, r25	; 0x01
     dbe:	0d c0       	rjmp	.+26     	; 0xdda <vfprintf+0x124>
     dc0:	83 36       	cpi	r24, 0x63	; 99
     dc2:	31 f0       	breq	.+12     	; 0xdd0 <vfprintf+0x11a>
     dc4:	83 37       	cpi	r24, 0x73	; 115
     dc6:	71 f0       	breq	.+28     	; 0xde4 <vfprintf+0x12e>
     dc8:	83 35       	cpi	r24, 0x53	; 83
     dca:	09 f0       	breq	.+2      	; 0xdce <vfprintf+0x118>
     dcc:	59 c0       	rjmp	.+178    	; 0xe80 <vfprintf+0x1ca>
     dce:	21 c0       	rjmp	.+66     	; 0xe12 <vfprintf+0x15c>
     dd0:	f8 01       	movw	r30, r16
     dd2:	80 81       	ld	r24, Z
     dd4:	89 83       	std	Y+1, r24	; 0x01
     dd6:	0e 5f       	subi	r16, 0xFE	; 254
     dd8:	1f 4f       	sbci	r17, 0xFF	; 255
     dda:	88 24       	eor	r8, r8
     ddc:	83 94       	inc	r8
     dde:	91 2c       	mov	r9, r1
     de0:	53 01       	movw	r10, r6
     de2:	13 c0       	rjmp	.+38     	; 0xe0a <vfprintf+0x154>
     de4:	28 01       	movw	r4, r16
     de6:	f2 e0       	ldi	r31, 0x02	; 2
     de8:	4f 0e       	add	r4, r31
     dea:	51 1c       	adc	r5, r1
     dec:	f8 01       	movw	r30, r16
     dee:	a0 80       	ld	r10, Z
     df0:	b1 80       	ldd	r11, Z+1	; 0x01
     df2:	36 fe       	sbrs	r3, 6
     df4:	03 c0       	rjmp	.+6      	; 0xdfc <vfprintf+0x146>
     df6:	69 2d       	mov	r22, r9
     df8:	70 e0       	ldi	r23, 0x00	; 0
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <vfprintf+0x14a>
     dfc:	6f ef       	ldi	r22, 0xFF	; 255
     dfe:	7f ef       	ldi	r23, 0xFF	; 255
     e00:	c5 01       	movw	r24, r10
     e02:	0e 94 47 08 	call	0x108e	; 0x108e <strnlen>
     e06:	4c 01       	movw	r8, r24
     e08:	82 01       	movw	r16, r4
     e0a:	f3 2d       	mov	r31, r3
     e0c:	ff 77       	andi	r31, 0x7F	; 127
     e0e:	3f 2e       	mov	r3, r31
     e10:	16 c0       	rjmp	.+44     	; 0xe3e <vfprintf+0x188>
     e12:	28 01       	movw	r4, r16
     e14:	22 e0       	ldi	r18, 0x02	; 2
     e16:	42 0e       	add	r4, r18
     e18:	51 1c       	adc	r5, r1
     e1a:	f8 01       	movw	r30, r16
     e1c:	a0 80       	ld	r10, Z
     e1e:	b1 80       	ldd	r11, Z+1	; 0x01
     e20:	36 fe       	sbrs	r3, 6
     e22:	03 c0       	rjmp	.+6      	; 0xe2a <vfprintf+0x174>
     e24:	69 2d       	mov	r22, r9
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <vfprintf+0x178>
     e2a:	6f ef       	ldi	r22, 0xFF	; 255
     e2c:	7f ef       	ldi	r23, 0xFF	; 255
     e2e:	c5 01       	movw	r24, r10
     e30:	0e 94 3c 08 	call	0x1078	; 0x1078 <strnlen_P>
     e34:	4c 01       	movw	r8, r24
     e36:	f3 2d       	mov	r31, r3
     e38:	f0 68       	ori	r31, 0x80	; 128
     e3a:	3f 2e       	mov	r3, r31
     e3c:	82 01       	movw	r16, r4
     e3e:	33 fc       	sbrc	r3, 3
     e40:	1b c0       	rjmp	.+54     	; 0xe78 <vfprintf+0x1c2>
     e42:	82 2d       	mov	r24, r2
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	88 16       	cp	r8, r24
     e48:	99 06       	cpc	r9, r25
     e4a:	b0 f4       	brcc	.+44     	; 0xe78 <vfprintf+0x1c2>
     e4c:	b6 01       	movw	r22, r12
     e4e:	80 e2       	ldi	r24, 0x20	; 32
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	0e 94 52 08 	call	0x10a4	; 0x10a4 <fputc>
     e56:	2a 94       	dec	r2
     e58:	f4 cf       	rjmp	.-24     	; 0xe42 <vfprintf+0x18c>
     e5a:	f5 01       	movw	r30, r10
     e5c:	37 fc       	sbrc	r3, 7
     e5e:	85 91       	lpm	r24, Z+
     e60:	37 fe       	sbrs	r3, 7
     e62:	81 91       	ld	r24, Z+
     e64:	5f 01       	movw	r10, r30
     e66:	b6 01       	movw	r22, r12
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	0e 94 52 08 	call	0x10a4	; 0x10a4 <fputc>
     e6e:	21 10       	cpse	r2, r1
     e70:	2a 94       	dec	r2
     e72:	21 e0       	ldi	r18, 0x01	; 1
     e74:	82 1a       	sub	r8, r18
     e76:	91 08       	sbc	r9, r1
     e78:	81 14       	cp	r8, r1
     e7a:	91 04       	cpc	r9, r1
     e7c:	71 f7       	brne	.-36     	; 0xe5a <vfprintf+0x1a4>
     e7e:	e8 c0       	rjmp	.+464    	; 0x1050 <vfprintf+0x39a>
     e80:	84 36       	cpi	r24, 0x64	; 100
     e82:	11 f0       	breq	.+4      	; 0xe88 <vfprintf+0x1d2>
     e84:	89 36       	cpi	r24, 0x69	; 105
     e86:	41 f5       	brne	.+80     	; 0xed8 <vfprintf+0x222>
     e88:	f8 01       	movw	r30, r16
     e8a:	37 fe       	sbrs	r3, 7
     e8c:	07 c0       	rjmp	.+14     	; 0xe9c <vfprintf+0x1e6>
     e8e:	60 81       	ld	r22, Z
     e90:	71 81       	ldd	r23, Z+1	; 0x01
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	0c 5f       	subi	r16, 0xFC	; 252
     e98:	1f 4f       	sbci	r17, 0xFF	; 255
     e9a:	08 c0       	rjmp	.+16     	; 0xeac <vfprintf+0x1f6>
     e9c:	60 81       	ld	r22, Z
     e9e:	71 81       	ldd	r23, Z+1	; 0x01
     ea0:	07 2e       	mov	r0, r23
     ea2:	00 0c       	add	r0, r0
     ea4:	88 0b       	sbc	r24, r24
     ea6:	99 0b       	sbc	r25, r25
     ea8:	0e 5f       	subi	r16, 0xFE	; 254
     eaa:	1f 4f       	sbci	r17, 0xFF	; 255
     eac:	f3 2d       	mov	r31, r3
     eae:	ff 76       	andi	r31, 0x6F	; 111
     eb0:	3f 2e       	mov	r3, r31
     eb2:	97 ff       	sbrs	r25, 7
     eb4:	09 c0       	rjmp	.+18     	; 0xec8 <vfprintf+0x212>
     eb6:	90 95       	com	r25
     eb8:	80 95       	com	r24
     eba:	70 95       	com	r23
     ebc:	61 95       	neg	r22
     ebe:	7f 4f       	sbci	r23, 0xFF	; 255
     ec0:	8f 4f       	sbci	r24, 0xFF	; 255
     ec2:	9f 4f       	sbci	r25, 0xFF	; 255
     ec4:	f0 68       	ori	r31, 0x80	; 128
     ec6:	3f 2e       	mov	r3, r31
     ec8:	2a e0       	ldi	r18, 0x0A	; 10
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	a3 01       	movw	r20, r6
     ece:	0e 94 8e 08 	call	0x111c	; 0x111c <__ultoa_invert>
     ed2:	88 2e       	mov	r8, r24
     ed4:	86 18       	sub	r8, r6
     ed6:	45 c0       	rjmp	.+138    	; 0xf62 <vfprintf+0x2ac>
     ed8:	85 37       	cpi	r24, 0x75	; 117
     eda:	31 f4       	brne	.+12     	; 0xee8 <vfprintf+0x232>
     edc:	23 2d       	mov	r18, r3
     ede:	2f 7e       	andi	r18, 0xEF	; 239
     ee0:	b2 2e       	mov	r11, r18
     ee2:	2a e0       	ldi	r18, 0x0A	; 10
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	25 c0       	rjmp	.+74     	; 0xf32 <vfprintf+0x27c>
     ee8:	93 2d       	mov	r25, r3
     eea:	99 7f       	andi	r25, 0xF9	; 249
     eec:	b9 2e       	mov	r11, r25
     eee:	8f 36       	cpi	r24, 0x6F	; 111
     ef0:	c1 f0       	breq	.+48     	; 0xf22 <vfprintf+0x26c>
     ef2:	18 f4       	brcc	.+6      	; 0xefa <vfprintf+0x244>
     ef4:	88 35       	cpi	r24, 0x58	; 88
     ef6:	79 f0       	breq	.+30     	; 0xf16 <vfprintf+0x260>
     ef8:	b5 c0       	rjmp	.+362    	; 0x1064 <vfprintf+0x3ae>
     efa:	80 37       	cpi	r24, 0x70	; 112
     efc:	19 f0       	breq	.+6      	; 0xf04 <vfprintf+0x24e>
     efe:	88 37       	cpi	r24, 0x78	; 120
     f00:	21 f0       	breq	.+8      	; 0xf0a <vfprintf+0x254>
     f02:	b0 c0       	rjmp	.+352    	; 0x1064 <vfprintf+0x3ae>
     f04:	e9 2f       	mov	r30, r25
     f06:	e0 61       	ori	r30, 0x10	; 16
     f08:	be 2e       	mov	r11, r30
     f0a:	b4 fe       	sbrs	r11, 4
     f0c:	0d c0       	rjmp	.+26     	; 0xf28 <vfprintf+0x272>
     f0e:	fb 2d       	mov	r31, r11
     f10:	f4 60       	ori	r31, 0x04	; 4
     f12:	bf 2e       	mov	r11, r31
     f14:	09 c0       	rjmp	.+18     	; 0xf28 <vfprintf+0x272>
     f16:	34 fe       	sbrs	r3, 4
     f18:	0a c0       	rjmp	.+20     	; 0xf2e <vfprintf+0x278>
     f1a:	29 2f       	mov	r18, r25
     f1c:	26 60       	ori	r18, 0x06	; 6
     f1e:	b2 2e       	mov	r11, r18
     f20:	06 c0       	rjmp	.+12     	; 0xf2e <vfprintf+0x278>
     f22:	28 e0       	ldi	r18, 0x08	; 8
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	05 c0       	rjmp	.+10     	; 0xf32 <vfprintf+0x27c>
     f28:	20 e1       	ldi	r18, 0x10	; 16
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <vfprintf+0x27c>
     f2e:	20 e1       	ldi	r18, 0x10	; 16
     f30:	32 e0       	ldi	r19, 0x02	; 2
     f32:	f8 01       	movw	r30, r16
     f34:	b7 fe       	sbrs	r11, 7
     f36:	07 c0       	rjmp	.+14     	; 0xf46 <vfprintf+0x290>
     f38:	60 81       	ld	r22, Z
     f3a:	71 81       	ldd	r23, Z+1	; 0x01
     f3c:	82 81       	ldd	r24, Z+2	; 0x02
     f3e:	93 81       	ldd	r25, Z+3	; 0x03
     f40:	0c 5f       	subi	r16, 0xFC	; 252
     f42:	1f 4f       	sbci	r17, 0xFF	; 255
     f44:	06 c0       	rjmp	.+12     	; 0xf52 <vfprintf+0x29c>
     f46:	60 81       	ld	r22, Z
     f48:	71 81       	ldd	r23, Z+1	; 0x01
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	0e 5f       	subi	r16, 0xFE	; 254
     f50:	1f 4f       	sbci	r17, 0xFF	; 255
     f52:	a3 01       	movw	r20, r6
     f54:	0e 94 8e 08 	call	0x111c	; 0x111c <__ultoa_invert>
     f58:	88 2e       	mov	r8, r24
     f5a:	86 18       	sub	r8, r6
     f5c:	fb 2d       	mov	r31, r11
     f5e:	ff 77       	andi	r31, 0x7F	; 127
     f60:	3f 2e       	mov	r3, r31
     f62:	36 fe       	sbrs	r3, 6
     f64:	0d c0       	rjmp	.+26     	; 0xf80 <vfprintf+0x2ca>
     f66:	23 2d       	mov	r18, r3
     f68:	2e 7f       	andi	r18, 0xFE	; 254
     f6a:	a2 2e       	mov	r10, r18
     f6c:	89 14       	cp	r8, r9
     f6e:	58 f4       	brcc	.+22     	; 0xf86 <vfprintf+0x2d0>
     f70:	34 fe       	sbrs	r3, 4
     f72:	0b c0       	rjmp	.+22     	; 0xf8a <vfprintf+0x2d4>
     f74:	32 fc       	sbrc	r3, 2
     f76:	09 c0       	rjmp	.+18     	; 0xf8a <vfprintf+0x2d4>
     f78:	83 2d       	mov	r24, r3
     f7a:	8e 7e       	andi	r24, 0xEE	; 238
     f7c:	a8 2e       	mov	r10, r24
     f7e:	05 c0       	rjmp	.+10     	; 0xf8a <vfprintf+0x2d4>
     f80:	b8 2c       	mov	r11, r8
     f82:	a3 2c       	mov	r10, r3
     f84:	03 c0       	rjmp	.+6      	; 0xf8c <vfprintf+0x2d6>
     f86:	b8 2c       	mov	r11, r8
     f88:	01 c0       	rjmp	.+2      	; 0xf8c <vfprintf+0x2d6>
     f8a:	b9 2c       	mov	r11, r9
     f8c:	a4 fe       	sbrs	r10, 4
     f8e:	0f c0       	rjmp	.+30     	; 0xfae <vfprintf+0x2f8>
     f90:	fe 01       	movw	r30, r28
     f92:	e8 0d       	add	r30, r8
     f94:	f1 1d       	adc	r31, r1
     f96:	80 81       	ld	r24, Z
     f98:	80 33       	cpi	r24, 0x30	; 48
     f9a:	21 f4       	brne	.+8      	; 0xfa4 <vfprintf+0x2ee>
     f9c:	9a 2d       	mov	r25, r10
     f9e:	99 7e       	andi	r25, 0xE9	; 233
     fa0:	a9 2e       	mov	r10, r25
     fa2:	09 c0       	rjmp	.+18     	; 0xfb6 <vfprintf+0x300>
     fa4:	a2 fe       	sbrs	r10, 2
     fa6:	06 c0       	rjmp	.+12     	; 0xfb4 <vfprintf+0x2fe>
     fa8:	b3 94       	inc	r11
     faa:	b3 94       	inc	r11
     fac:	04 c0       	rjmp	.+8      	; 0xfb6 <vfprintf+0x300>
     fae:	8a 2d       	mov	r24, r10
     fb0:	86 78       	andi	r24, 0x86	; 134
     fb2:	09 f0       	breq	.+2      	; 0xfb6 <vfprintf+0x300>
     fb4:	b3 94       	inc	r11
     fb6:	a3 fc       	sbrc	r10, 3
     fb8:	11 c0       	rjmp	.+34     	; 0xfdc <vfprintf+0x326>
     fba:	a0 fe       	sbrs	r10, 0
     fbc:	06 c0       	rjmp	.+12     	; 0xfca <vfprintf+0x314>
     fbe:	b2 14       	cp	r11, r2
     fc0:	88 f4       	brcc	.+34     	; 0xfe4 <vfprintf+0x32e>
     fc2:	28 0c       	add	r2, r8
     fc4:	92 2c       	mov	r9, r2
     fc6:	9b 18       	sub	r9, r11
     fc8:	0e c0       	rjmp	.+28     	; 0xfe6 <vfprintf+0x330>
     fca:	b2 14       	cp	r11, r2
     fcc:	60 f4       	brcc	.+24     	; 0xfe6 <vfprintf+0x330>
     fce:	b6 01       	movw	r22, r12
     fd0:	80 e2       	ldi	r24, 0x20	; 32
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	0e 94 52 08 	call	0x10a4	; 0x10a4 <fputc>
     fd8:	b3 94       	inc	r11
     fda:	f7 cf       	rjmp	.-18     	; 0xfca <vfprintf+0x314>
     fdc:	b2 14       	cp	r11, r2
     fde:	18 f4       	brcc	.+6      	; 0xfe6 <vfprintf+0x330>
     fe0:	2b 18       	sub	r2, r11
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <vfprintf+0x332>
     fe4:	98 2c       	mov	r9, r8
     fe6:	21 2c       	mov	r2, r1
     fe8:	a4 fe       	sbrs	r10, 4
     fea:	10 c0       	rjmp	.+32     	; 0x100c <vfprintf+0x356>
     fec:	b6 01       	movw	r22, r12
     fee:	80 e3       	ldi	r24, 0x30	; 48
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	0e 94 52 08 	call	0x10a4	; 0x10a4 <fputc>
     ff6:	a2 fe       	sbrs	r10, 2
     ff8:	17 c0       	rjmp	.+46     	; 0x1028 <vfprintf+0x372>
     ffa:	a1 fc       	sbrc	r10, 1
     ffc:	03 c0       	rjmp	.+6      	; 0x1004 <vfprintf+0x34e>
     ffe:	88 e7       	ldi	r24, 0x78	; 120
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <vfprintf+0x352>
    1004:	88 e5       	ldi	r24, 0x58	; 88
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	b6 01       	movw	r22, r12
    100a:	0c c0       	rjmp	.+24     	; 0x1024 <vfprintf+0x36e>
    100c:	8a 2d       	mov	r24, r10
    100e:	86 78       	andi	r24, 0x86	; 134
    1010:	59 f0       	breq	.+22     	; 0x1028 <vfprintf+0x372>
    1012:	a1 fe       	sbrs	r10, 1
    1014:	02 c0       	rjmp	.+4      	; 0x101a <vfprintf+0x364>
    1016:	8b e2       	ldi	r24, 0x2B	; 43
    1018:	01 c0       	rjmp	.+2      	; 0x101c <vfprintf+0x366>
    101a:	80 e2       	ldi	r24, 0x20	; 32
    101c:	a7 fc       	sbrc	r10, 7
    101e:	8d e2       	ldi	r24, 0x2D	; 45
    1020:	b6 01       	movw	r22, r12
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	0e 94 52 08 	call	0x10a4	; 0x10a4 <fputc>
    1028:	89 14       	cp	r8, r9
    102a:	38 f4       	brcc	.+14     	; 0x103a <vfprintf+0x384>
    102c:	b6 01       	movw	r22, r12
    102e:	80 e3       	ldi	r24, 0x30	; 48
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	0e 94 52 08 	call	0x10a4	; 0x10a4 <fputc>
    1036:	9a 94       	dec	r9
    1038:	f7 cf       	rjmp	.-18     	; 0x1028 <vfprintf+0x372>
    103a:	8a 94       	dec	r8
    103c:	f3 01       	movw	r30, r6
    103e:	e8 0d       	add	r30, r8
    1040:	f1 1d       	adc	r31, r1
    1042:	80 81       	ld	r24, Z
    1044:	b6 01       	movw	r22, r12
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	0e 94 52 08 	call	0x10a4	; 0x10a4 <fputc>
    104c:	81 10       	cpse	r8, r1
    104e:	f5 cf       	rjmp	.-22     	; 0x103a <vfprintf+0x384>
    1050:	22 20       	and	r2, r2
    1052:	09 f4       	brne	.+2      	; 0x1056 <vfprintf+0x3a0>
    1054:	42 ce       	rjmp	.-892    	; 0xcda <vfprintf+0x24>
    1056:	b6 01       	movw	r22, r12
    1058:	80 e2       	ldi	r24, 0x20	; 32
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	0e 94 52 08 	call	0x10a4	; 0x10a4 <fputc>
    1060:	2a 94       	dec	r2
    1062:	f6 cf       	rjmp	.-20     	; 0x1050 <vfprintf+0x39a>
    1064:	f6 01       	movw	r30, r12
    1066:	86 81       	ldd	r24, Z+6	; 0x06
    1068:	97 81       	ldd	r25, Z+7	; 0x07
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <vfprintf+0x3ba>
    106c:	8f ef       	ldi	r24, 0xFF	; 255
    106e:	9f ef       	ldi	r25, 0xFF	; 255
    1070:	2b 96       	adiw	r28, 0x0b	; 11
    1072:	e2 e1       	ldi	r30, 0x12	; 18
    1074:	0c 94 08 09 	jmp	0x1210	; 0x1210 <__epilogue_restores__>

00001078 <strnlen_P>:
    1078:	fc 01       	movw	r30, r24
    107a:	05 90       	lpm	r0, Z+
    107c:	61 50       	subi	r22, 0x01	; 1
    107e:	70 40       	sbci	r23, 0x00	; 0
    1080:	01 10       	cpse	r0, r1
    1082:	d8 f7       	brcc	.-10     	; 0x107a <strnlen_P+0x2>
    1084:	80 95       	com	r24
    1086:	90 95       	com	r25
    1088:	8e 0f       	add	r24, r30
    108a:	9f 1f       	adc	r25, r31
    108c:	08 95       	ret

0000108e <strnlen>:
    108e:	fc 01       	movw	r30, r24
    1090:	61 50       	subi	r22, 0x01	; 1
    1092:	70 40       	sbci	r23, 0x00	; 0
    1094:	01 90       	ld	r0, Z+
    1096:	01 10       	cpse	r0, r1
    1098:	d8 f7       	brcc	.-10     	; 0x1090 <strnlen+0x2>
    109a:	80 95       	com	r24
    109c:	90 95       	com	r25
    109e:	8e 0f       	add	r24, r30
    10a0:	9f 1f       	adc	r25, r31
    10a2:	08 95       	ret

000010a4 <fputc>:
    10a4:	0f 93       	push	r16
    10a6:	1f 93       	push	r17
    10a8:	cf 93       	push	r28
    10aa:	df 93       	push	r29
    10ac:	fb 01       	movw	r30, r22
    10ae:	23 81       	ldd	r18, Z+3	; 0x03
    10b0:	21 fd       	sbrc	r18, 1
    10b2:	03 c0       	rjmp	.+6      	; 0x10ba <fputc+0x16>
    10b4:	8f ef       	ldi	r24, 0xFF	; 255
    10b6:	9f ef       	ldi	r25, 0xFF	; 255
    10b8:	2c c0       	rjmp	.+88     	; 0x1112 <fputc+0x6e>
    10ba:	22 ff       	sbrs	r18, 2
    10bc:	16 c0       	rjmp	.+44     	; 0x10ea <fputc+0x46>
    10be:	46 81       	ldd	r20, Z+6	; 0x06
    10c0:	57 81       	ldd	r21, Z+7	; 0x07
    10c2:	24 81       	ldd	r18, Z+4	; 0x04
    10c4:	35 81       	ldd	r19, Z+5	; 0x05
    10c6:	42 17       	cp	r20, r18
    10c8:	53 07       	cpc	r21, r19
    10ca:	44 f4       	brge	.+16     	; 0x10dc <fputc+0x38>
    10cc:	a0 81       	ld	r26, Z
    10ce:	b1 81       	ldd	r27, Z+1	; 0x01
    10d0:	9d 01       	movw	r18, r26
    10d2:	2f 5f       	subi	r18, 0xFF	; 255
    10d4:	3f 4f       	sbci	r19, 0xFF	; 255
    10d6:	31 83       	std	Z+1, r19	; 0x01
    10d8:	20 83       	st	Z, r18
    10da:	8c 93       	st	X, r24
    10dc:	26 81       	ldd	r18, Z+6	; 0x06
    10de:	37 81       	ldd	r19, Z+7	; 0x07
    10e0:	2f 5f       	subi	r18, 0xFF	; 255
    10e2:	3f 4f       	sbci	r19, 0xFF	; 255
    10e4:	37 83       	std	Z+7, r19	; 0x07
    10e6:	26 83       	std	Z+6, r18	; 0x06
    10e8:	14 c0       	rjmp	.+40     	; 0x1112 <fputc+0x6e>
    10ea:	8b 01       	movw	r16, r22
    10ec:	ec 01       	movw	r28, r24
    10ee:	fb 01       	movw	r30, r22
    10f0:	00 84       	ldd	r0, Z+8	; 0x08
    10f2:	f1 85       	ldd	r31, Z+9	; 0x09
    10f4:	e0 2d       	mov	r30, r0
    10f6:	09 95       	icall
    10f8:	89 2b       	or	r24, r25
    10fa:	e1 f6       	brne	.-72     	; 0x10b4 <fputc+0x10>
    10fc:	d8 01       	movw	r26, r16
    10fe:	16 96       	adiw	r26, 0x06	; 6
    1100:	8d 91       	ld	r24, X+
    1102:	9c 91       	ld	r25, X
    1104:	17 97       	sbiw	r26, 0x07	; 7
    1106:	01 96       	adiw	r24, 0x01	; 1
    1108:	17 96       	adiw	r26, 0x07	; 7
    110a:	9c 93       	st	X, r25
    110c:	8e 93       	st	-X, r24
    110e:	16 97       	sbiw	r26, 0x06	; 6
    1110:	ce 01       	movw	r24, r28
    1112:	df 91       	pop	r29
    1114:	cf 91       	pop	r28
    1116:	1f 91       	pop	r17
    1118:	0f 91       	pop	r16
    111a:	08 95       	ret

0000111c <__ultoa_invert>:
    111c:	fa 01       	movw	r30, r20
    111e:	aa 27       	eor	r26, r26
    1120:	28 30       	cpi	r18, 0x08	; 8
    1122:	51 f1       	breq	.+84     	; 0x1178 <__ultoa_invert+0x5c>
    1124:	20 31       	cpi	r18, 0x10	; 16
    1126:	81 f1       	breq	.+96     	; 0x1188 <__ultoa_invert+0x6c>
    1128:	e8 94       	clt
    112a:	6f 93       	push	r22
    112c:	6e 7f       	andi	r22, 0xFE	; 254
    112e:	6e 5f       	subi	r22, 0xFE	; 254
    1130:	7f 4f       	sbci	r23, 0xFF	; 255
    1132:	8f 4f       	sbci	r24, 0xFF	; 255
    1134:	9f 4f       	sbci	r25, 0xFF	; 255
    1136:	af 4f       	sbci	r26, 0xFF	; 255
    1138:	b1 e0       	ldi	r27, 0x01	; 1
    113a:	3e d0       	rcall	.+124    	; 0x11b8 <__ultoa_invert+0x9c>
    113c:	b4 e0       	ldi	r27, 0x04	; 4
    113e:	3c d0       	rcall	.+120    	; 0x11b8 <__ultoa_invert+0x9c>
    1140:	67 0f       	add	r22, r23
    1142:	78 1f       	adc	r23, r24
    1144:	89 1f       	adc	r24, r25
    1146:	9a 1f       	adc	r25, r26
    1148:	a1 1d       	adc	r26, r1
    114a:	68 0f       	add	r22, r24
    114c:	79 1f       	adc	r23, r25
    114e:	8a 1f       	adc	r24, r26
    1150:	91 1d       	adc	r25, r1
    1152:	a1 1d       	adc	r26, r1
    1154:	6a 0f       	add	r22, r26
    1156:	71 1d       	adc	r23, r1
    1158:	81 1d       	adc	r24, r1
    115a:	91 1d       	adc	r25, r1
    115c:	a1 1d       	adc	r26, r1
    115e:	20 d0       	rcall	.+64     	; 0x11a0 <__ultoa_invert+0x84>
    1160:	09 f4       	brne	.+2      	; 0x1164 <__ultoa_invert+0x48>
    1162:	68 94       	set
    1164:	3f 91       	pop	r19
    1166:	2a e0       	ldi	r18, 0x0A	; 10
    1168:	26 9f       	mul	r18, r22
    116a:	11 24       	eor	r1, r1
    116c:	30 19       	sub	r19, r0
    116e:	30 5d       	subi	r19, 0xD0	; 208
    1170:	31 93       	st	Z+, r19
    1172:	de f6       	brtc	.-74     	; 0x112a <__ultoa_invert+0xe>
    1174:	cf 01       	movw	r24, r30
    1176:	08 95       	ret
    1178:	46 2f       	mov	r20, r22
    117a:	47 70       	andi	r20, 0x07	; 7
    117c:	40 5d       	subi	r20, 0xD0	; 208
    117e:	41 93       	st	Z+, r20
    1180:	b3 e0       	ldi	r27, 0x03	; 3
    1182:	0f d0       	rcall	.+30     	; 0x11a2 <__ultoa_invert+0x86>
    1184:	c9 f7       	brne	.-14     	; 0x1178 <__ultoa_invert+0x5c>
    1186:	f6 cf       	rjmp	.-20     	; 0x1174 <__ultoa_invert+0x58>
    1188:	46 2f       	mov	r20, r22
    118a:	4f 70       	andi	r20, 0x0F	; 15
    118c:	40 5d       	subi	r20, 0xD0	; 208
    118e:	4a 33       	cpi	r20, 0x3A	; 58
    1190:	18 f0       	brcs	.+6      	; 0x1198 <__ultoa_invert+0x7c>
    1192:	49 5d       	subi	r20, 0xD9	; 217
    1194:	31 fd       	sbrc	r19, 1
    1196:	40 52       	subi	r20, 0x20	; 32
    1198:	41 93       	st	Z+, r20
    119a:	02 d0       	rcall	.+4      	; 0x11a0 <__ultoa_invert+0x84>
    119c:	a9 f7       	brne	.-22     	; 0x1188 <__ultoa_invert+0x6c>
    119e:	ea cf       	rjmp	.-44     	; 0x1174 <__ultoa_invert+0x58>
    11a0:	b4 e0       	ldi	r27, 0x04	; 4
    11a2:	a6 95       	lsr	r26
    11a4:	97 95       	ror	r25
    11a6:	87 95       	ror	r24
    11a8:	77 95       	ror	r23
    11aa:	67 95       	ror	r22
    11ac:	ba 95       	dec	r27
    11ae:	c9 f7       	brne	.-14     	; 0x11a2 <__ultoa_invert+0x86>
    11b0:	00 97       	sbiw	r24, 0x00	; 0
    11b2:	61 05       	cpc	r22, r1
    11b4:	71 05       	cpc	r23, r1
    11b6:	08 95       	ret
    11b8:	9b 01       	movw	r18, r22
    11ba:	ac 01       	movw	r20, r24
    11bc:	0a 2e       	mov	r0, r26
    11be:	06 94       	lsr	r0
    11c0:	57 95       	ror	r21
    11c2:	47 95       	ror	r20
    11c4:	37 95       	ror	r19
    11c6:	27 95       	ror	r18
    11c8:	ba 95       	dec	r27
    11ca:	c9 f7       	brne	.-14     	; 0x11be <__ultoa_invert+0xa2>
    11cc:	62 0f       	add	r22, r18
    11ce:	73 1f       	adc	r23, r19
    11d0:	84 1f       	adc	r24, r20
    11d2:	95 1f       	adc	r25, r21
    11d4:	a0 1d       	adc	r26, r0
    11d6:	08 95       	ret

000011d8 <__prologue_saves__>:
    11d8:	2f 92       	push	r2
    11da:	3f 92       	push	r3
    11dc:	4f 92       	push	r4
    11de:	5f 92       	push	r5
    11e0:	6f 92       	push	r6
    11e2:	7f 92       	push	r7
    11e4:	8f 92       	push	r8
    11e6:	9f 92       	push	r9
    11e8:	af 92       	push	r10
    11ea:	bf 92       	push	r11
    11ec:	cf 92       	push	r12
    11ee:	df 92       	push	r13
    11f0:	ef 92       	push	r14
    11f2:	ff 92       	push	r15
    11f4:	0f 93       	push	r16
    11f6:	1f 93       	push	r17
    11f8:	cf 93       	push	r28
    11fa:	df 93       	push	r29
    11fc:	cd b7       	in	r28, 0x3d	; 61
    11fe:	de b7       	in	r29, 0x3e	; 62
    1200:	ca 1b       	sub	r28, r26
    1202:	db 0b       	sbc	r29, r27
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	f8 94       	cli
    1208:	de bf       	out	0x3e, r29	; 62
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	cd bf       	out	0x3d, r28	; 61
    120e:	09 94       	ijmp

00001210 <__epilogue_restores__>:
    1210:	2a 88       	ldd	r2, Y+18	; 0x12
    1212:	39 88       	ldd	r3, Y+17	; 0x11
    1214:	48 88       	ldd	r4, Y+16	; 0x10
    1216:	5f 84       	ldd	r5, Y+15	; 0x0f
    1218:	6e 84       	ldd	r6, Y+14	; 0x0e
    121a:	7d 84       	ldd	r7, Y+13	; 0x0d
    121c:	8c 84       	ldd	r8, Y+12	; 0x0c
    121e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1220:	aa 84       	ldd	r10, Y+10	; 0x0a
    1222:	b9 84       	ldd	r11, Y+9	; 0x09
    1224:	c8 84       	ldd	r12, Y+8	; 0x08
    1226:	df 80       	ldd	r13, Y+7	; 0x07
    1228:	ee 80       	ldd	r14, Y+6	; 0x06
    122a:	fd 80       	ldd	r15, Y+5	; 0x05
    122c:	0c 81       	ldd	r16, Y+4	; 0x04
    122e:	1b 81       	ldd	r17, Y+3	; 0x03
    1230:	aa 81       	ldd	r26, Y+2	; 0x02
    1232:	b9 81       	ldd	r27, Y+1	; 0x01
    1234:	ce 0f       	add	r28, r30
    1236:	d1 1d       	adc	r29, r1
    1238:	0f b6       	in	r0, 0x3f	; 63
    123a:	f8 94       	cli
    123c:	de bf       	out	0x3e, r29	; 62
    123e:	0f be       	out	0x3f, r0	; 63
    1240:	cd bf       	out	0x3d, r28	; 61
    1242:	ed 01       	movw	r28, r26
    1244:	08 95       	ret

00001246 <_exit>:
    1246:	f8 94       	cli

00001248 <__stop_program>:
    1248:	ff cf       	rjmp	.-2      	; 0x1248 <__stop_program>
